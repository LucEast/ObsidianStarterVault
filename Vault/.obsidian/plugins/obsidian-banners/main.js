/*
- THIS IS A GENERATED/BUNDLED FILE BY ESBUILD -
Please visit the repository linked to view the source code:
https://github.com/noatpad/obsidian-banners
*/
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key2 of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key2) && key2 !== "default")
        __defProp(target, key2, { get: () => module2[key2], enumerable: !(desc = __getOwnPropDesc(module2, key2)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/validator/lib/util/assertString.js
var require_assertString = __commonJS({
  "node_modules/validator/lib/util/assertString.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = assertString;
    function _typeof(obj) {
      "@babel/helpers - typeof";
      if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
        _typeof = function _typeof2(obj2) {
          return typeof obj2;
        };
      } else {
        _typeof = function _typeof2(obj2) {
          return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        };
      }
      return _typeof(obj);
    }
    function assertString(input) {
      var isString = typeof input === "string" || input instanceof String;
      if (!isString) {
        var invalidType = _typeof(input);
        if (input === null)
          invalidType = "null";
        else if (invalidType === "object")
          invalidType = input.constructor.name;
        throw new TypeError("Expected a string but received a ".concat(invalidType));
      }
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/util/merge.js
var require_merge = __commonJS({
  "node_modules/validator/lib/util/merge.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = merge;
    function merge() {
      var obj = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
      var defaults2 = arguments.length > 1 ? arguments[1] : void 0;
      for (var key2 in defaults2) {
        if (typeof obj[key2] === "undefined") {
          obj[key2] = defaults2[key2];
        }
      }
      return obj;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isFQDN.js
var require_isFQDN = __commonJS({
  "node_modules/validator/lib/isFQDN.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isFQDN;
    var _assertString = _interopRequireDefault(require_assertString());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_fqdn_options = {
      require_tld: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_numeric_tld: false
    };
    function isFQDN(str, options) {
      (0, _assertString.default)(str);
      options = (0, _merge.default)(options, default_fqdn_options);
      if (options.allow_trailing_dot && str[str.length - 1] === ".") {
        str = str.substring(0, str.length - 1);
      }
      var parts = str.split(".");
      var tld = parts[parts.length - 1];
      if (options.require_tld) {
        if (parts.length < 2) {
          return false;
        }
        if (!/^([a-z\u00a1-\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {
          return false;
        }
        if (/[\s\u2002-\u200B\u202F\u205F\u3000\uFEFF\uDB40\uDC20\u00A9\uFFFD]/.test(tld)) {
          return false;
        }
      }
      if (!options.allow_numeric_tld && /^\d+$/.test(tld)) {
        return false;
      }
      return parts.every(function(part) {
        if (part.length > 63) {
          return false;
        }
        if (!/^[a-z_\u00a1-\uffff0-9-]+$/i.test(part)) {
          return false;
        }
        if (/[\uff01-\uff5e]/.test(part)) {
          return false;
        }
        if (/^-|-$/.test(part)) {
          return false;
        }
        if (!options.allow_underscores && /_/.test(part)) {
          return false;
        }
        return true;
      });
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isIP.js
var require_isIP = __commonJS({
  "node_modules/validator/lib/isIP.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isIP;
    var _assertString = _interopRequireDefault(require_assertString());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var IPv4SegmentFormat = "(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])";
    var IPv4AddressFormat = "(".concat(IPv4SegmentFormat, "[.]){3}").concat(IPv4SegmentFormat);
    var IPv4AddressRegExp = new RegExp("^".concat(IPv4AddressFormat, "$"));
    var IPv6SegmentFormat = "(?:[0-9a-fA-F]{1,4})";
    var IPv6AddressRegExp = new RegExp("^(" + "(?:".concat(IPv6SegmentFormat, ":){7}(?:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){6}(?:").concat(IPv4AddressFormat, "|:").concat(IPv6SegmentFormat, "|:)|") + "(?:".concat(IPv6SegmentFormat, ":){5}(?::").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,2}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){4}(?:(:").concat(IPv6SegmentFormat, "){0,1}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,3}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){3}(?:(:").concat(IPv6SegmentFormat, "){0,2}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,4}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){2}(?:(:").concat(IPv6SegmentFormat, "){0,3}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,5}|:)|") + "(?:".concat(IPv6SegmentFormat, ":){1}(?:(:").concat(IPv6SegmentFormat, "){0,4}:").concat(IPv4AddressFormat, "|(:").concat(IPv6SegmentFormat, "){1,6}|:)|") + "(?::((?::".concat(IPv6SegmentFormat, "){0,5}:").concat(IPv4AddressFormat, "|(?::").concat(IPv6SegmentFormat, "){1,7}|:))") + ")(%[0-9a-zA-Z-.:]{1,})?$");
    function isIP(str) {
      var version = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
      (0, _assertString.default)(str);
      version = String(version);
      if (!version) {
        return isIP(str, 4) || isIP(str, 6);
      }
      if (version === "4") {
        if (!IPv4AddressRegExp.test(str)) {
          return false;
        }
        var parts = str.split(".").sort(function(a2, b2) {
          return a2 - b2;
        });
        return parts[3] <= 255;
      }
      if (version === "6") {
        return !!IPv6AddressRegExp.test(str);
      }
      return false;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/validator/lib/isURL.js
var require_isURL = __commonJS({
  "node_modules/validator/lib/isURL.js"(exports, module2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = isURL2;
    var _assertString = _interopRequireDefault(require_assertString());
    var _isFQDN = _interopRequireDefault(require_isFQDN());
    var _isIP = _interopRequireDefault(require_isIP());
    var _merge = _interopRequireDefault(require_merge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    var default_url_options = {
      protocols: ["http", "https", "ftp"],
      require_tld: true,
      require_protocol: false,
      require_host: true,
      require_port: false,
      require_valid_protocol: true,
      allow_underscores: false,
      allow_trailing_dot: false,
      allow_protocol_relative_urls: false,
      validate_length: true
    };
    var wrapped_ipv6 = /^\[([^\]]+)\](?::([0-9]+))?$/;
    function isRegExp(obj) {
      return Object.prototype.toString.call(obj) === "[object RegExp]";
    }
    function checkHost(host, matches) {
      for (var i = 0; i < matches.length; i++) {
        var match = matches[i];
        if (host === match || isRegExp(match) && match.test(host)) {
          return true;
        }
      }
      return false;
    }
    function isURL2(url, options) {
      (0, _assertString.default)(url);
      if (!url || /[\s<>]/.test(url)) {
        return false;
      }
      if (url.indexOf("mailto:") === 0) {
        return false;
      }
      options = (0, _merge.default)(options, default_url_options);
      if (options.validate_length && url.length >= 2083) {
        return false;
      }
      var protocol, auth, host, hostname, port, port_str, split, ipv6;
      split = url.split("#");
      url = split.shift();
      split = url.split("?");
      url = split.shift();
      split = url.split("://");
      if (split.length > 1) {
        protocol = split.shift().toLowerCase();
        if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {
          return false;
        }
      } else if (options.require_protocol) {
        return false;
      } else if (url.substr(0, 2) === "//") {
        if (!options.allow_protocol_relative_urls) {
          return false;
        }
        split[0] = url.substr(2);
      }
      url = split.join("://");
      if (url === "") {
        return false;
      }
      split = url.split("/");
      url = split.shift();
      if (url === "" && !options.require_host) {
        return true;
      }
      split = url.split("@");
      if (split.length > 1) {
        if (options.disallow_auth) {
          return false;
        }
        if (split[0] === "" || split[0].substr(0, 1) === ":") {
          return false;
        }
        auth = split.shift();
        if (auth.indexOf(":") >= 0 && auth.split(":").length > 2) {
          return false;
        }
      }
      hostname = split.join("@");
      port_str = null;
      ipv6 = null;
      var ipv6_match = hostname.match(wrapped_ipv6);
      if (ipv6_match) {
        host = "";
        ipv6 = ipv6_match[1];
        port_str = ipv6_match[2] || null;
      } else {
        split = hostname.split(":");
        host = split.shift();
        if (split.length) {
          port_str = split.join(":");
        }
      }
      if (port_str !== null) {
        port = parseInt(port_str, 10);
        if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {
          return false;
        }
      } else if (options.require_port) {
        return false;
      }
      if (!(0, _isIP.default)(host) && !(0, _isFQDN.default)(host, options) && (!ipv6 || !(0, _isIP.default)(ipv6, 6))) {
        return false;
      }
      host = host || ipv6;
      if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {
        return false;
      }
      if (options.host_blacklist && checkHost(host, options.host_blacklist)) {
        return false;
      }
      return true;
    }
    module2.exports = exports.default;
    module2.exports.default = exports.default;
  }
});

// node_modules/emoji-regex/index.js
var require_emoji_regex = __commonJS({
  "node_modules/emoji-regex/index.js"(exports, module2) {
    module2.exports = () => {
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67)\uDB40\uDC7F|(?:\uD83E\uDDD1\uD83C\uDFFF\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?|\u200D(?:\uD83D\uDC8B\u200D)?)\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69])|\uD83E\uDEF1\uD83C\uDFFF\u200D\uD83E\uDEF2)(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?|\u200D(?:\uD83D\uDC8B\u200D)?)\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69])|\uD83E\uDEF1\uD83C\uDFFE\u200D\uD83E\uDEF2)(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?|\u200D(?:\uD83D\uDC8B\u200D)?)\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69])|\uD83E\uDEF1\uD83C\uDFFD\u200D\uD83E\uDEF2)(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?|\u200D(?:\uD83D\uDC8B\u200D)?)\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69])|\uD83E\uDEF1\uD83C\uDFFC\u200D\uD83E\uDEF2)(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?|\u200D(?:\uD83D\uDC8B\u200D)?)\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69])|\uD83E\uDEF1\uD83C\uDFFB\u200D\uD83E\uDEF2)(?:\uD83C[\uDFFC-\uDFFF])|\uD83D\uDC68(?:\uD83C\uDFFB(?:\u200D(?:\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])))|\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|[\u2695\u2696\u2708]\uFE0F|[\u2695\u2696\u2708]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))?|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF]))|\u200D(?:\uD83D\uDC8B\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFF])))|\u200D(?:\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?|\u200D(?:\uD83D\uDC8B\u200D)?)\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])\uFE0F|\u200D(?:(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D[\uDC66\uDC67])|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\u200D[\u2695\u2696\u2708])?|(?:\uD83D\uDC69(?:\uD83C\uDFFB\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|(?:\uD83C[\uDFFC-\uDFFF])\u200D\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])))|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC69(?:\u200D(?:\u2764(?:\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69]))|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83E\uDDD1(?:\u200D(?:\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F?\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F?\u200D\u26A7|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3C-\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3])\uFE0F|\uD83D\uDC41\uFE0F?\u200D\uD83D\uDDE8|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|\uD83C\uDFF3\uFE0F?\u200D\uD83C\uDF08|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDE36\u200D\uD83C\uDF2B|\uD83C\uDFF3\uFE0F?\u200D\u26A7|\uD83D\uDE35\u200D\uD83D\uDCAB|\uD83D\uDE2E\u200D\uD83D\uDCA8|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83E\uDEF1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83E\uDDD1(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC69(?:\uD83C\uDFFF|\uD83C\uDFFE|\uD83C\uDFFD|\uD83C\uDFFC|\uD83C\uDFFB)?|\uD83D\uDC3B\u200D\u2744|(?:(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|\uD83D\uDC6F|\uD83E[\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF6\uD83C\uDDE6|\uD83C\uDDF4\uD83C\uDDF2|\uD83D\uDC08\u200D\u2B1B|\u2764(?:\uFE0F\u200D(?:\uD83D\uDD25|\uD83E\uDE79)|\u200D(?:\uD83D\uDD25|\uD83E\uDE79))|\uD83D\uDC41\uFE0F?|\uD83C\uDFF3\uFE0F?|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3C-\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])\u200D[\u2640\u2642]|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|[#\*0-9]\uFE0F?\u20E3|\uD83E\uDD3C(?:\uD83C[\uDFFB-\uDFFF])|\u2764\uFE0F?|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|\uD83C\uDFF4|(?:[\u270A\u270B]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF6])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270C\u270D]|\uD83D[\uDD74\uDD90])(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])|[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC08\uDC15\uDC3B\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE2E\uDE35\uDE36\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD3C\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF6]|\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD4\uDDD6-\uDDDD]|\uD83D\uDC6F|\uD83E[\uDDDE\uDDDF]|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26D3\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]|\uD83D[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B50]|\uD83C[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDD-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC2\uDED0-\uDED9\uDEE0-\uDEE7]/g;
    };
  }
});

// node_modules/lodash/_baseClamp.js
var require_baseClamp = __commonJS({
  "node_modules/lodash/_baseClamp.js"(exports, module2) {
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== void 0) {
          number = number <= upper ? number : upper;
        }
        if (lower !== void 0) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }
    module2.exports = baseClamp;
  }
});

// node_modules/lodash/_trimmedEndIndex.js
var require_trimmedEndIndex = __commonJS({
  "node_modules/lodash/_trimmedEndIndex.js"(exports, module2) {
    var reWhitespace = /\s/;
    function trimmedEndIndex(string) {
      var index = string.length;
      while (index-- && reWhitespace.test(string.charAt(index))) {
      }
      return index;
    }
    module2.exports = trimmedEndIndex;
  }
});

// node_modules/lodash/_baseTrim.js
var require_baseTrim = __commonJS({
  "node_modules/lodash/_baseTrim.js"(exports, module2) {
    var trimmedEndIndex = require_trimmedEndIndex();
    var reTrimStart = /^\s+/;
    function baseTrim(string) {
      return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
    }
    module2.exports = baseTrim;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module2) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module2.exports = isObject;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module2) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module2.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module2.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module2) {
    var root = require_root();
    var Symbol2 = root.Symbol;
    module2.exports = Symbol2;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module2.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module2) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module2.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module2.exports = baseGetTag;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module2) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module2.exports = isObjectLike;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module2.exports = isSymbol;
  }
});

// node_modules/lodash/toNumber.js
var require_toNumber = __commonJS({
  "node_modules/lodash/toNumber.js"(exports, module2) {
    var baseTrim = require_baseTrim();
    var isObject = require_isObject();
    var isSymbol = require_isSymbol();
    var NAN = 0 / 0;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module2.exports = toNumber;
  }
});

// node_modules/lodash/clamp.js
var require_clamp = __commonJS({
  "node_modules/lodash/clamp.js"(exports, module2) {
    var baseClamp = require_baseClamp();
    var toNumber = require_toNumber();
    function clamp2(number, lower, upper) {
      if (upper === void 0) {
        upper = lower;
        lower = void 0;
      }
      if (upper !== void 0) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== void 0) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }
    module2.exports = clamp2;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module2) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module2.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module2) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module2.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module2) {
    var eq = require_eq();
    function assocIndexOf(array, key2) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key2)) {
          return length;
        }
      }
      return -1;
    }
    module2.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    module2.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key2) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      return index < 0 ? void 0 : data[index][1];
    }
    module2.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key2) {
      return assocIndexOf(this.__data__, key2) > -1;
    }
    module2.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module2) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key2, value) {
      var data = this.__data__, index = assocIndexOf(data, key2);
      if (index < 0) {
        ++this.size;
        data.push([key2, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    module2.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module2) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module2.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module2) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module2.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module2) {
    function stackDelete(key2) {
      var data = this.__data__, result = data["delete"](key2);
      this.size = data.size;
      return result;
    }
    module2.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module2) {
    function stackGet(key2) {
      return this.__data__.get(key2);
    }
    module2.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module2) {
    function stackHas(key2) {
      return this.__data__.has(key2);
    }
    module2.exports = stackHas;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module2.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module2) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module2.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module2) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module2.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module2) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    module2.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module2) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module2.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module2) {
    function getValue(object, key2) {
      return object == null ? void 0 : object[key2];
    }
    module2.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module2) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key2) {
      var value = getValue(object, key2);
      return baseIsNative(value) ? value : void 0;
    }
    module2.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Map = getNative(root, "Map");
    module2.exports = Map;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module2) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module2.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module2.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module2) {
    function hashDelete(key2) {
      var result = this.has(key2) && delete this.__data__[key2];
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key2) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key2];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key2) ? data[key2] : void 0;
    }
    module2.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key2) {
      var data = this.__data__;
      return nativeCreate ? data[key2] !== void 0 : hasOwnProperty.call(data, key2);
    }
    module2.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module2) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key2, value) {
      var data = this.__data__;
      this.size += this.has(key2) ? 0 : 1;
      data[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module2.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module2) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module2.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module2) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    module2.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module2) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module2.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module2) {
    var isKeyable = require_isKeyable();
    function getMapData(map, key2) {
      var data = map.__data__;
      return isKeyable(key2) ? data[typeof key2 == "string" ? "string" : "hash"] : data.map;
    }
    module2.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key2) {
      var result = getMapData(this, key2)["delete"](key2);
      this.size -= result ? 1 : 0;
      return result;
    }
    module2.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheGet(key2) {
      return getMapData(this, key2).get(key2);
    }
    module2.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheHas(key2) {
      return getMapData(this, key2).has(key2);
    }
    module2.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module2) {
    var getMapData = require_getMapData();
    function mapCacheSet(key2, value) {
      var data = getMapData(this, key2), size = data.size;
      data.set(key2, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module2.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module2) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module2.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module2) {
    var ListCache = require_ListCache();
    var Map = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key2, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key2, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key2, value);
      this.size = data.size;
      return this;
    }
    module2.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module2) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module2.exports = Stack;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module2) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module2.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module2) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module2.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module2) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module2.exports = SetCache;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module2) {
    function arraySome(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    module2.exports = arraySome;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module2) {
    function cacheHas(cache, key2) {
      return cache.has(key2);
    }
    module2.exports = cacheHas;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module2) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalArrays;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module2) {
    var root = require_root();
    var Uint8Array2 = root.Uint8Array;
    module2.exports = Uint8Array2;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module2) {
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key2) {
        result[++index] = [key2, value];
      });
      return result;
    }
    module2.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module2) {
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    module2.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module2) {
    var Symbol2 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module2.exports = equalByTag;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module2) {
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    module2.exports = arrayPush;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module2) {
    var isArray = Array.isArray;
    module2.exports = isArray;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module2) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module2.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module2) {
    function arrayFilter(array, predicate) {
      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module2.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module2) {
    function stubArray() {
      return [];
    }
    module2.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module2) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module2.exports = getSymbols;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module2) {
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    module2.exports = baseTimes;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module2.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module2) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module2.exports = isArguments;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module2) {
    function stubFalse() {
      return false;
    }
    module2.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module2) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module2.exports = isBuffer;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module2.exports = isIndex;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module2) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module2.exports = isLength;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module2) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module2.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module2) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module2.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module2) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    module2.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module2) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module2.exports = isTypedArray;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module2) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key2 in value) {
        if ((inherited || hasOwnProperty.call(value, key2)) && !(skipIndexes && (key2 == "length" || isBuff && (key2 == "offset" || key2 == "parent") || isType && (key2 == "buffer" || key2 == "byteLength" || key2 == "byteOffset") || isIndex(key2, length)))) {
          result.push(key2);
        }
      }
      return result;
    }
    module2.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module2) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module2.exports = isPrototype;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module2) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module2.exports = overArg;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module2) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module2.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module2) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key2 in Object(object)) {
        if (hasOwnProperty.call(object, key2) && key2 != "constructor") {
          result.push(key2);
        }
      }
      return result;
    }
    module2.exports = baseKeys;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module2) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module2.exports = isArrayLike;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module2) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module2.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module2) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module2.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module2) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key2 = objProps[index];
        if (!(isPartial ? key2 in other : hasOwnProperty.call(other, key2))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key2 = objProps[index];
        var objValue = object[key2], othValue = other[key2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key2, other, object, stack) : customizer(objValue, othValue, key2, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key2 == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module2.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView = getNative(root, "DataView");
    module2.exports = DataView;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module2.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module2.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module2) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module2.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module2) {
    var DataView = require_DataView();
    var Map = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module2.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module2) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module2.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module2) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module2.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module2) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    module2.exports = isEqual2;
  }
});

// src/main.ts
__export(exports, {
  default: () => BannersPlugin
});
var import_obsidian10 = __toModule(require("obsidian"));
var import_isURL = __toModule(require_isURL());

// src/modals/IconModal.ts
var import_obsidian = __toModule(require("obsidian"));
var import_emoji_regex = __toModule(require_emoji_regex());

// node_modules/twemoji/dist/twemoji.esm.js
var twemoji = function() {
  "use strict";
  var twemoji2 = { base: "https://twemoji.maxcdn.com/v/13.1.0/", ext: ".png", size: "72x72", className: "emoji", convert: { fromCodePoint, toCodePoint }, onerror: function onerror() {
    if (this.parentNode) {
      this.parentNode.replaceChild(createText(this.alt, false), this);
    }
  }, parse, replace, test }, escaper = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "'": "&#39;", '"': "&quot;" }, re = /(?:\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83d\udc68\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc68\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc68\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc68\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffc-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffd-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb\udffc\udffe\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffd\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc68\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83d\udc69\ud83c[\udffb-\udfff]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc68\ud83c[\udffb-\udffe]|\ud83d\udc69\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83d\udc69\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udffb\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffc-\udfff]|\ud83e\uddd1\ud83c\udffb\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffd-\udfff]|\ud83e\uddd1\ud83c\udffc\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb\udffc\udffe\udfff]|\ud83e\uddd1\ud83c\udffd\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffd\udfff]|\ud83e\uddd1\ud83c\udffe\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83e\uddd1\ud83c\udfff\u200d\u2764\ufe0f\u200d\ud83e\uddd1\ud83c[\udffb-\udffe]|\ud83e\uddd1\ud83c\udfff\u200d\ud83e\udd1d\u200d\ud83e\uddd1\ud83c[\udffb-\udfff]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d\udc8b\u200d\ud83d[\udc68\udc69]|\ud83d\udc68\u200d\u2764\ufe0f\u200d\ud83d\udc68|\ud83d\udc69\u200d\u2764\ufe0f\u200d\ud83d[\udc68\udc69]|\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1|\ud83d\udc6b\ud83c[\udffb-\udfff]|\ud83d\udc6c\ud83c[\udffb-\udfff]|\ud83d\udc6d\ud83c[\udffb-\udfff]|\ud83d\udc8f\ud83c[\udffb-\udfff]|\ud83d\udc91\ud83c[\udffb-\udfff]|\ud83d[\udc6b-\udc6d\udc8f\udc91])|(?:\ud83d[\udc68\udc69]|\ud83e\uddd1)(?:\ud83c[\udffb-\udfff])?\u200d(?:\u2695\ufe0f|\u2696\ufe0f|\u2708\ufe0f|\ud83c[\udf3e\udf73\udf7c\udf84\udf93\udfa4\udfa8\udfeb\udfed]|\ud83d[\udcbb\udcbc\udd27\udd2c\ude80\ude92]|\ud83e[\uddaf-\uddb3\uddbc\uddbd])|(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75]|\u26f9)((?:\ud83c[\udffb-\udfff]|\ufe0f)\u200d[\u2640\u2642]\ufe0f)|(?:\ud83c[\udfc3\udfc4\udfca]|\ud83d[\udc6e\udc70\udc71\udc73\udc77\udc81\udc82\udc86\udc87\ude45-\ude47\ude4b\ude4d\ude4e\udea3\udeb4-\udeb6]|\ud83e[\udd26\udd35\udd37-\udd39\udd3d\udd3e\uddb8\uddb9\uddcd-\uddcf\uddd4\uddd6-\udddd])(?:\ud83c[\udffb-\udfff])?\u200d[\u2640\u2642]\ufe0f|(?:\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc68\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66|\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f|\ud83c\udff3\ufe0f\u200d\ud83c\udf08|\ud83d\ude36\u200d\ud83c\udf2b\ufe0f|\u2764\ufe0f\u200d\ud83d\udd25|\u2764\ufe0f\u200d\ud83e\ude79|\ud83c\udff4\u200d\u2620\ufe0f|\ud83d\udc15\u200d\ud83e\uddba|\ud83d\udc3b\u200d\u2744\ufe0f|\ud83d\udc41\u200d\ud83d\udde8|\ud83d\udc68\u200d\ud83d[\udc66\udc67]|\ud83d\udc69\u200d\ud83d[\udc66\udc67]|\ud83d\udc6f\u200d\u2640\ufe0f|\ud83d\udc6f\u200d\u2642\ufe0f|\ud83d\ude2e\u200d\ud83d\udca8|\ud83d\ude35\u200d\ud83d\udcab|\ud83e\udd3c\u200d\u2640\ufe0f|\ud83e\udd3c\u200d\u2642\ufe0f|\ud83e\uddde\u200d\u2640\ufe0f|\ud83e\uddde\u200d\u2642\ufe0f|\ud83e\udddf\u200d\u2640\ufe0f|\ud83e\udddf\u200d\u2642\ufe0f|\ud83d\udc08\u200d\u2b1b)|[#*0-9]\ufe0f?\u20e3|(?:[©®\u2122\u265f]\ufe0f)|(?:\ud83c[\udc04\udd70\udd71\udd7e\udd7f\ude02\ude1a\ude2f\ude37\udf21\udf24-\udf2c\udf36\udf7d\udf96\udf97\udf99-\udf9b\udf9e\udf9f\udfcd\udfce\udfd4-\udfdf\udff3\udff5\udff7]|\ud83d[\udc3f\udc41\udcfd\udd49\udd4a\udd6f\udd70\udd73\udd76-\udd79\udd87\udd8a-\udd8d\udda5\udda8\uddb1\uddb2\uddbc\uddc2-\uddc4\uddd1-\uddd3\udddc-\uddde\udde1\udde3\udde8\uddef\uddf3\uddfa\udecb\udecd-\udecf\udee0-\udee5\udee9\udef0\udef3]|[\u203c\u2049\u2139\u2194-\u2199\u21a9\u21aa\u231a\u231b\u2328\u23cf\u23ed-\u23ef\u23f1\u23f2\u23f8-\u23fa\u24c2\u25aa\u25ab\u25b6\u25c0\u25fb-\u25fe\u2600-\u2604\u260e\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262a\u262e\u262f\u2638-\u263a\u2640\u2642\u2648-\u2653\u2660\u2663\u2665\u2666\u2668\u267b\u267f\u2692-\u2697\u2699\u269b\u269c\u26a0\u26a1\u26a7\u26aa\u26ab\u26b0\u26b1\u26bd\u26be\u26c4\u26c5\u26c8\u26cf\u26d1\u26d3\u26d4\u26e9\u26ea\u26f0-\u26f5\u26f8\u26fa\u26fd\u2702\u2708\u2709\u270f\u2712\u2714\u2716\u271d\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u2764\u27a1\u2934\u2935\u2b05-\u2b07\u2b1b\u2b1c\u2b50\u2b55\u3030\u303d\u3297\u3299])(?:\ufe0f|(?!\ufe0e))|(?:(?:\ud83c[\udfcb\udfcc]|\ud83d[\udd74\udd75\udd90]|[\u261d\u26f7\u26f9\u270c\u270d])(?:\ufe0f|(?!\ufe0e))|(?:\ud83c[\udf85\udfc2-\udfc4\udfc7\udfca]|\ud83d[\udc42\udc43\udc46-\udc50\udc66-\udc69\udc6e\udc70-\udc78\udc7c\udc81-\udc83\udc85-\udc87\udcaa\udd7a\udd95\udd96\ude45-\ude47\ude4b-\ude4f\udea3\udeb4-\udeb6\udec0\udecc]|\ud83e[\udd0c\udd0f\udd18-\udd1c\udd1e\udd1f\udd26\udd30-\udd39\udd3d\udd3e\udd77\uddb5\uddb6\uddb8\uddb9\uddbb\uddcd-\uddcf\uddd1-\udddd]|[\u270a\u270b]))(?:\ud83c[\udffb-\udfff])?|(?:\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc73\udb40\udc63\udb40\udc74\udb40\udc7f|\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc77\udb40\udc6c\udb40\udc73\udb40\udc7f|\ud83c\udde6\ud83c[\udde8-\uddec\uddee\uddf1\uddf2\uddf4\uddf6-\uddfa\uddfc\uddfd\uddff]|\ud83c\udde7\ud83c[\udde6\udde7\udde9-\uddef\uddf1-\uddf4\uddf6-\uddf9\uddfb\uddfc\uddfe\uddff]|\ud83c\udde8\ud83c[\udde6\udde8\udde9\uddeb-\uddee\uddf0-\uddf5\uddf7\uddfa-\uddff]|\ud83c\udde9\ud83c[\uddea\uddec\uddef\uddf0\uddf2\uddf4\uddff]|\ud83c\uddea\ud83c[\udde6\udde8\uddea\uddec\udded\uddf7-\uddfa]|\ud83c\uddeb\ud83c[\uddee-\uddf0\uddf2\uddf4\uddf7]|\ud83c\uddec\ud83c[\udde6\udde7\udde9-\uddee\uddf1-\uddf3\uddf5-\uddfa\uddfc\uddfe]|\ud83c\udded\ud83c[\uddf0\uddf2\uddf3\uddf7\uddf9\uddfa]|\ud83c\uddee\ud83c[\udde8-\uddea\uddf1-\uddf4\uddf6-\uddf9]|\ud83c\uddef\ud83c[\uddea\uddf2\uddf4\uddf5]|\ud83c\uddf0\ud83c[\uddea\uddec-\uddee\uddf2\uddf3\uddf5\uddf7\uddfc\uddfe\uddff]|\ud83c\uddf1\ud83c[\udde6-\udde8\uddee\uddf0\uddf7-\uddfb\uddfe]|\ud83c\uddf2\ud83c[\udde6\udde8-\udded\uddf0-\uddff]|\ud83c\uddf3\ud83c[\udde6\udde8\uddea-\uddec\uddee\uddf1\uddf4\uddf5\uddf7\uddfa\uddff]|\ud83c\uddf4\ud83c\uddf2|\ud83c\uddf5\ud83c[\udde6\uddea-\udded\uddf0-\uddf3\uddf7-\uddf9\uddfc\uddfe]|\ud83c\uddf6\ud83c\udde6|\ud83c\uddf7\ud83c[\uddea\uddf4\uddf8\uddfa\uddfc]|\ud83c\uddf8\ud83c[\udde6-\uddea\uddec-\uddf4\uddf7-\uddf9\uddfb\uddfd-\uddff]|\ud83c\uddf9\ud83c[\udde6\udde8\udde9\uddeb-\udded\uddef-\uddf4\uddf7\uddf9\uddfb\uddfc\uddff]|\ud83c\uddfa\ud83c[\udde6\uddec\uddf2\uddf3\uddf8\uddfe\uddff]|\ud83c\uddfb\ud83c[\udde6\udde8\uddea\uddec\uddee\uddf3\uddfa]|\ud83c\uddfc\ud83c[\uddeb\uddf8]|\ud83c\uddfd\ud83c\uddf0|\ud83c\uddfe\ud83c[\uddea\uddf9]|\ud83c\uddff\ud83c[\udde6\uddf2\uddfc]|\ud83c[\udccf\udd8e\udd91-\udd9a\udde6-\uddff\ude01\ude32-\ude36\ude38-\ude3a\ude50\ude51\udf00-\udf20\udf2d-\udf35\udf37-\udf7c\udf7e-\udf84\udf86-\udf93\udfa0-\udfc1\udfc5\udfc6\udfc8\udfc9\udfcf-\udfd3\udfe0-\udff0\udff4\udff8-\udfff]|\ud83d[\udc00-\udc3e\udc40\udc44\udc45\udc51-\udc65\udc6a\udc6f\udc79-\udc7b\udc7d-\udc80\udc84\udc88-\udc8e\udc90\udc92-\udca9\udcab-\udcfc\udcff-\udd3d\udd4b-\udd4e\udd50-\udd67\udda4\uddfb-\ude44\ude48-\ude4a\ude80-\udea2\udea4-\udeb3\udeb7-\udebf\udec1-\udec5\uded0-\uded2\uded5-\uded7\udeeb\udeec\udef4-\udefc\udfe0-\udfeb]|\ud83e[\udd0d\udd0e\udd10-\udd17\udd1d\udd20-\udd25\udd27-\udd2f\udd3a\udd3c\udd3f-\udd45\udd47-\udd76\udd78\udd7a-\uddb4\uddb7\uddba\uddbc-\uddcb\uddd0\uddde-\uddff\ude70-\ude74\ude78-\ude7a\ude80-\ude86\ude90-\udea8\udeb0-\udeb6\udec0-\udec2\uded0-\uded6]|[\u23e9-\u23ec\u23f0\u23f3\u267e\u26ce\u2705\u2728\u274c\u274e\u2753-\u2755\u2795-\u2797\u27b0\u27bf\ue50a])|\ufe0f/g, UFE0Fg = /\uFE0F/g, U200D = String.fromCharCode(8205), rescaper = /[&<>'"]/g, shouldntBeParsed = /^(?:iframe|noframes|noscript|script|select|style|textarea)$/, fromCharCode = String.fromCharCode;
  return twemoji2;
  function createText(text, clean) {
    return document.createTextNode(clean ? text.replace(UFE0Fg, "") : text);
  }
  function escapeHTML(s) {
    return s.replace(rescaper, replacer);
  }
  function defaultImageSrcGenerator(icon, options) {
    return "".concat(options.base, options.size, "/", icon, options.ext);
  }
  function grabAllTextNodes(node, allText) {
    var childNodes = node.childNodes, length = childNodes.length, subnode, nodeType;
    while (length--) {
      subnode = childNodes[length];
      nodeType = subnode.nodeType;
      if (nodeType === 3) {
        allText.push(subnode);
      } else if (nodeType === 1 && !("ownerSVGElement" in subnode) && !shouldntBeParsed.test(subnode.nodeName.toLowerCase())) {
        grabAllTextNodes(subnode, allText);
      }
    }
    return allText;
  }
  function grabTheRightIcon(rawText) {
    return toCodePoint(rawText.indexOf(U200D) < 0 ? rawText.replace(UFE0Fg, "") : rawText);
  }
  function parseNode(node, options) {
    var allText = grabAllTextNodes(node, []), length = allText.length, attrib, attrname, modified, fragment, subnode, text, match, i, index, img, rawText, iconId, src;
    while (length--) {
      modified = false;
      fragment = document.createDocumentFragment();
      subnode = allText[length];
      text = subnode.nodeValue;
      i = 0;
      while (match = re.exec(text)) {
        index = match.index;
        if (index !== i) {
          fragment.appendChild(createText(text.slice(i, index), true));
        }
        rawText = match[0];
        iconId = grabTheRightIcon(rawText);
        i = index + rawText.length;
        src = options.callback(iconId, options);
        if (iconId && src) {
          img = new Image();
          img.onerror = options.onerror;
          img.setAttribute("draggable", "false");
          attrib = options.attributes(rawText, iconId);
          for (attrname in attrib) {
            if (attrib.hasOwnProperty(attrname) && attrname.indexOf("on") !== 0 && !img.hasAttribute(attrname)) {
              img.setAttribute(attrname, attrib[attrname]);
            }
          }
          img.className = options.className;
          img.alt = rawText;
          img.src = src;
          modified = true;
          fragment.appendChild(img);
        }
        if (!img)
          fragment.appendChild(createText(rawText, false));
        img = null;
      }
      if (modified) {
        if (i < text.length) {
          fragment.appendChild(createText(text.slice(i), true));
        }
        subnode.parentNode.replaceChild(fragment, subnode);
      }
    }
    return node;
  }
  function parseString(str, options) {
    return replace(str, function(rawText) {
      var ret = rawText, iconId = grabTheRightIcon(rawText), src = options.callback(iconId, options), attrib, attrname;
      if (iconId && src) {
        ret = "<img ".concat('class="', options.className, '" ', 'draggable="false" ', 'alt="', rawText, '"', ' src="', src, '"');
        attrib = options.attributes(rawText, iconId);
        for (attrname in attrib) {
          if (attrib.hasOwnProperty(attrname) && attrname.indexOf("on") !== 0 && ret.indexOf(" " + attrname + "=") === -1) {
            ret = ret.concat(" ", attrname, '="', escapeHTML(attrib[attrname]), '"');
          }
        }
        ret = ret.concat("/>");
      }
      return ret;
    });
  }
  function replacer(m2) {
    return escaper[m2];
  }
  function returnNull() {
    return null;
  }
  function toSizeSquaredAsset(value) {
    return typeof value === "number" ? value + "x" + value : value;
  }
  function fromCodePoint(codepoint) {
    var code = typeof codepoint === "string" ? parseInt(codepoint, 16) : codepoint;
    if (code < 65536) {
      return fromCharCode(code);
    }
    code -= 65536;
    return fromCharCode(55296 + (code >> 10), 56320 + (code & 1023));
  }
  function parse(what, how) {
    if (!how || typeof how === "function") {
      how = { callback: how };
    }
    return (typeof what === "string" ? parseString : parseNode)(what, { callback: how.callback || defaultImageSrcGenerator, attributes: typeof how.attributes === "function" ? how.attributes : returnNull, base: typeof how.base === "string" ? how.base : twemoji2.base, ext: how.ext || twemoji2.ext, size: how.folder || toSizeSquaredAsset(how.size || twemoji2.size), className: how.className || twemoji2.className, onerror: how.onerror || twemoji2.onerror });
  }
  function replace(text, callback) {
    return String(text).replace(re, callback);
  }
  function test(text) {
    re.lastIndex = 0;
    var result = re.test(text);
    re.lastIndex = 0;
    return result;
  }
  function toCodePoint(unicodeSurrogates, sep) {
    var r = [], c = 0, p = 0, i = 0;
    while (i < unicodeSurrogates.length) {
      c = unicodeSurrogates.charCodeAt(i++);
      if (p) {
        r.push((65536 + (p - 55296 << 10) + (c - 56320)).toString(16));
        p = 0;
      } else if (55296 <= c && c <= 56319) {
        p = c;
      } else {
        r.push(c.toString(16));
      }
    }
    return r.join(sep || "-");
  }
}();
var twemoji_esm_default = twemoji;

// node_modules/node-emoji/lib/emoji.json
var _00 = "\u{1F4AF}";
var _234 = "\u{1F522}";
var umbrella_with_rain_drops = "\u2614";
var coffee = "\u2615";
var aries = "\u2648";
var taurus = "\u2649";
var sagittarius = "\u2650";
var capricorn = "\u2651";
var aquarius = "\u2652";
var pisces = "\u2653";
var anchor = "\u2693";
var white_check_mark = "\u2705";
var sparkles = "\u2728";
var question = "\u2753";
var grey_question = "\u2754";
var grey_exclamation = "\u2755";
var exclamation = "\u2757";
var heavy_exclamation_mark = "\u2757";
var heavy_plus_sign = "\u2795";
var heavy_minus_sign = "\u2796";
var heavy_division_sign = "\u2797";
var hash = "#\uFE0F\u20E3";
var keycap_star = "*\uFE0F\u20E3";
var zero = "0\uFE0F\u20E3";
var one = "1\uFE0F\u20E3";
var two = "2\uFE0F\u20E3";
var three = "3\uFE0F\u20E3";
var four = "4\uFE0F\u20E3";
var five = "5\uFE0F\u20E3";
var six = "6\uFE0F\u20E3";
var seven = "7\uFE0F\u20E3";
var eight = "8\uFE0F\u20E3";
var nine = "9\uFE0F\u20E3";
var copyright = "\xA9\uFE0F";
var registered = "\xAE\uFE0F";
var mahjong = "\u{1F004}";
var black_joker = "\u{1F0CF}";
var a = "\u{1F170}\uFE0F";
var b = "\u{1F171}\uFE0F";
var o2 = "\u{1F17E}\uFE0F";
var parking = "\u{1F17F}\uFE0F";
var ab = "\u{1F18E}";
var cl = "\u{1F191}";
var cool = "\u{1F192}";
var free = "\u{1F193}";
var id = "\u{1F194}";
var new2 = "\u{1F195}";
var ng = "\u{1F196}";
var ok = "\u{1F197}";
var sos = "\u{1F198}";
var up = "\u{1F199}";
var vs = "\u{1F19A}";
var flag_ac = "\u{1F1E6}\u{1F1E8}";
var flag_ad = "\u{1F1E6}\u{1F1E9}";
var flag_ae = "\u{1F1E6}\u{1F1EA}";
var flag_af = "\u{1F1E6}\u{1F1EB}";
var flag_ag = "\u{1F1E6}\u{1F1EC}";
var flag_ai = "\u{1F1E6}\u{1F1EE}";
var flag_al = "\u{1F1E6}\u{1F1F1}";
var flag_am = "\u{1F1E6}\u{1F1F2}";
var flag_ao = "\u{1F1E6}\u{1F1F4}";
var flag_aq = "\u{1F1E6}\u{1F1F6}";
var flag_ar = "\u{1F1E6}\u{1F1F7}";
var flag_as = "\u{1F1E6}\u{1F1F8}";
var flag_at = "\u{1F1E6}\u{1F1F9}";
var flag_au = "\u{1F1E6}\u{1F1FA}";
var flag_aw = "\u{1F1E6}\u{1F1FC}";
var flag_ax = "\u{1F1E6}\u{1F1FD}";
var flag_az = "\u{1F1E6}\u{1F1FF}";
var flag_ba = "\u{1F1E7}\u{1F1E6}";
var flag_bb = "\u{1F1E7}\u{1F1E7}";
var flag_bd = "\u{1F1E7}\u{1F1E9}";
var flag_be = "\u{1F1E7}\u{1F1EA}";
var flag_bf = "\u{1F1E7}\u{1F1EB}";
var flag_bg = "\u{1F1E7}\u{1F1EC}";
var flag_bh = "\u{1F1E7}\u{1F1ED}";
var flag_bi = "\u{1F1E7}\u{1F1EE}";
var flag_bj = "\u{1F1E7}\u{1F1EF}";
var flag_bl = "\u{1F1E7}\u{1F1F1}";
var flag_bm = "\u{1F1E7}\u{1F1F2}";
var flag_bn = "\u{1F1E7}\u{1F1F3}";
var flag_bo = "\u{1F1E7}\u{1F1F4}";
var flag_bq = "\u{1F1E7}\u{1F1F6}";
var flag_br = "\u{1F1E7}\u{1F1F7}";
var flag_bs = "\u{1F1E7}\u{1F1F8}";
var flag_bt = "\u{1F1E7}\u{1F1F9}";
var flag_bv = "\u{1F1E7}\u{1F1FB}";
var flag_bw = "\u{1F1E7}\u{1F1FC}";
var flag_by = "\u{1F1E7}\u{1F1FE}";
var flag_bz = "\u{1F1E7}\u{1F1FF}";
var flag_ca = "\u{1F1E8}\u{1F1E6}";
var flag_cc = "\u{1F1E8}\u{1F1E8}";
var flag_cd = "\u{1F1E8}\u{1F1E9}";
var flag_cf = "\u{1F1E8}\u{1F1EB}";
var flag_cg = "\u{1F1E8}\u{1F1EC}";
var flag_ch = "\u{1F1E8}\u{1F1ED}";
var flag_ci = "\u{1F1E8}\u{1F1EE}";
var flag_ck = "\u{1F1E8}\u{1F1F0}";
var flag_cl = "\u{1F1E8}\u{1F1F1}";
var flag_cm = "\u{1F1E8}\u{1F1F2}";
var cn = "\u{1F1E8}\u{1F1F3}";
var flag_cn = "\u{1F1E8}\u{1F1F3}";
var flag_co = "\u{1F1E8}\u{1F1F4}";
var flag_cp = "\u{1F1E8}\u{1F1F5}";
var flag_cr = "\u{1F1E8}\u{1F1F7}";
var flag_cu = "\u{1F1E8}\u{1F1FA}";
var flag_cv = "\u{1F1E8}\u{1F1FB}";
var flag_cw = "\u{1F1E8}\u{1F1FC}";
var flag_cx = "\u{1F1E8}\u{1F1FD}";
var flag_cy = "\u{1F1E8}\u{1F1FE}";
var flag_cz = "\u{1F1E8}\u{1F1FF}";
var de = "\u{1F1E9}\u{1F1EA}";
var flag_de = "\u{1F1E9}\u{1F1EA}";
var flag_dg = "\u{1F1E9}\u{1F1EC}";
var flag_dj = "\u{1F1E9}\u{1F1EF}";
var flag_dk = "\u{1F1E9}\u{1F1F0}";
var flag_dm = "\u{1F1E9}\u{1F1F2}";
var flag_do = "\u{1F1E9}\u{1F1F4}";
var flag_dz = "\u{1F1E9}\u{1F1FF}";
var flag_ea = "\u{1F1EA}\u{1F1E6}";
var flag_ec = "\u{1F1EA}\u{1F1E8}";
var flag_ee = "\u{1F1EA}\u{1F1EA}";
var flag_eg = "\u{1F1EA}\u{1F1EC}";
var flag_eh = "\u{1F1EA}\u{1F1ED}";
var flag_er = "\u{1F1EA}\u{1F1F7}";
var es = "\u{1F1EA}\u{1F1F8}";
var flag_es = "\u{1F1EA}\u{1F1F8}";
var flag_et = "\u{1F1EA}\u{1F1F9}";
var flag_eu = "\u{1F1EA}\u{1F1FA}";
var flag_fi = "\u{1F1EB}\u{1F1EE}";
var flag_fj = "\u{1F1EB}\u{1F1EF}";
var flag_fk = "\u{1F1EB}\u{1F1F0}";
var flag_fm = "\u{1F1EB}\u{1F1F2}";
var flag_fo = "\u{1F1EB}\u{1F1F4}";
var fr = "\u{1F1EB}\u{1F1F7}";
var flag_fr = "\u{1F1EB}\u{1F1F7}";
var flag_ga = "\u{1F1EC}\u{1F1E6}";
var gb = "\u{1F1EC}\u{1F1E7}";
var uk = "\u{1F1EC}\u{1F1E7}";
var flag_gb = "\u{1F1EC}\u{1F1E7}";
var flag_gd = "\u{1F1EC}\u{1F1E9}";
var flag_ge = "\u{1F1EC}\u{1F1EA}";
var flag_gf = "\u{1F1EC}\u{1F1EB}";
var flag_gg = "\u{1F1EC}\u{1F1EC}";
var flag_gh = "\u{1F1EC}\u{1F1ED}";
var flag_gi = "\u{1F1EC}\u{1F1EE}";
var flag_gl = "\u{1F1EC}\u{1F1F1}";
var flag_gm = "\u{1F1EC}\u{1F1F2}";
var flag_gn = "\u{1F1EC}\u{1F1F3}";
var flag_gp = "\u{1F1EC}\u{1F1F5}";
var flag_gq = "\u{1F1EC}\u{1F1F6}";
var flag_gr = "\u{1F1EC}\u{1F1F7}";
var flag_gs = "\u{1F1EC}\u{1F1F8}";
var flag_gt = "\u{1F1EC}\u{1F1F9}";
var flag_gu = "\u{1F1EC}\u{1F1FA}";
var flag_gw = "\u{1F1EC}\u{1F1FC}";
var flag_gy = "\u{1F1EC}\u{1F1FE}";
var flag_hk = "\u{1F1ED}\u{1F1F0}";
var flag_hm = "\u{1F1ED}\u{1F1F2}";
var flag_hn = "\u{1F1ED}\u{1F1F3}";
var flag_hr = "\u{1F1ED}\u{1F1F7}";
var flag_ht = "\u{1F1ED}\u{1F1F9}";
var flag_hu = "\u{1F1ED}\u{1F1FA}";
var flag_ic = "\u{1F1EE}\u{1F1E8}";
var flag_id = "\u{1F1EE}\u{1F1E9}";
var flag_ie = "\u{1F1EE}\u{1F1EA}";
var flag_il = "\u{1F1EE}\u{1F1F1}";
var flag_im = "\u{1F1EE}\u{1F1F2}";
var flag_in = "\u{1F1EE}\u{1F1F3}";
var flag_io = "\u{1F1EE}\u{1F1F4}";
var flag_iq = "\u{1F1EE}\u{1F1F6}";
var flag_ir = "\u{1F1EE}\u{1F1F7}";
var flag_is = "\u{1F1EE}\u{1F1F8}";
var it = "\u{1F1EE}\u{1F1F9}";
var flag_it = "\u{1F1EE}\u{1F1F9}";
var flag_je = "\u{1F1EF}\u{1F1EA}";
var flag_jm = "\u{1F1EF}\u{1F1F2}";
var flag_jo = "\u{1F1EF}\u{1F1F4}";
var jp = "\u{1F1EF}\u{1F1F5}";
var flag_jp = "\u{1F1EF}\u{1F1F5}";
var flag_ke = "\u{1F1F0}\u{1F1EA}";
var flag_kg = "\u{1F1F0}\u{1F1EC}";
var flag_kh = "\u{1F1F0}\u{1F1ED}";
var flag_ki = "\u{1F1F0}\u{1F1EE}";
var flag_km = "\u{1F1F0}\u{1F1F2}";
var flag_kn = "\u{1F1F0}\u{1F1F3}";
var flag_kp = "\u{1F1F0}\u{1F1F5}";
var kr = "\u{1F1F0}\u{1F1F7}";
var flag_kr = "\u{1F1F0}\u{1F1F7}";
var flag_kw = "\u{1F1F0}\u{1F1FC}";
var flag_ky = "\u{1F1F0}\u{1F1FE}";
var flag_kz = "\u{1F1F0}\u{1F1FF}";
var flag_la = "\u{1F1F1}\u{1F1E6}";
var flag_lb = "\u{1F1F1}\u{1F1E7}";
var flag_lc = "\u{1F1F1}\u{1F1E8}";
var flag_li = "\u{1F1F1}\u{1F1EE}";
var flag_lk = "\u{1F1F1}\u{1F1F0}";
var flag_lr = "\u{1F1F1}\u{1F1F7}";
var flag_ls = "\u{1F1F1}\u{1F1F8}";
var flag_lt = "\u{1F1F1}\u{1F1F9}";
var flag_lu = "\u{1F1F1}\u{1F1FA}";
var flag_lv = "\u{1F1F1}\u{1F1FB}";
var flag_ly = "\u{1F1F1}\u{1F1FE}";
var flag_ma = "\u{1F1F2}\u{1F1E6}";
var flag_mc = "\u{1F1F2}\u{1F1E8}";
var flag_md = "\u{1F1F2}\u{1F1E9}";
var flag_me = "\u{1F1F2}\u{1F1EA}";
var flag_mf = "\u{1F1F2}\u{1F1EB}";
var flag_mg = "\u{1F1F2}\u{1F1EC}";
var flag_mh = "\u{1F1F2}\u{1F1ED}";
var flag_mk = "\u{1F1F2}\u{1F1F0}";
var flag_ml = "\u{1F1F2}\u{1F1F1}";
var flag_mm = "\u{1F1F2}\u{1F1F2}";
var flag_mn = "\u{1F1F2}\u{1F1F3}";
var flag_mo = "\u{1F1F2}\u{1F1F4}";
var flag_mp = "\u{1F1F2}\u{1F1F5}";
var flag_mq = "\u{1F1F2}\u{1F1F6}";
var flag_mr = "\u{1F1F2}\u{1F1F7}";
var flag_ms = "\u{1F1F2}\u{1F1F8}";
var flag_mt = "\u{1F1F2}\u{1F1F9}";
var flag_mu = "\u{1F1F2}\u{1F1FA}";
var flag_mv = "\u{1F1F2}\u{1F1FB}";
var flag_mw = "\u{1F1F2}\u{1F1FC}";
var flag_mx = "\u{1F1F2}\u{1F1FD}";
var flag_my = "\u{1F1F2}\u{1F1FE}";
var flag_mz = "\u{1F1F2}\u{1F1FF}";
var flag_na = "\u{1F1F3}\u{1F1E6}";
var flag_nc = "\u{1F1F3}\u{1F1E8}";
var flag_ne = "\u{1F1F3}\u{1F1EA}";
var flag_nf = "\u{1F1F3}\u{1F1EB}";
var flag_ng = "\u{1F1F3}\u{1F1EC}";
var flag_ni = "\u{1F1F3}\u{1F1EE}";
var flag_nl = "\u{1F1F3}\u{1F1F1}";
var flag_no = "\u{1F1F3}\u{1F1F4}";
var flag_np = "\u{1F1F3}\u{1F1F5}";
var flag_nr = "\u{1F1F3}\u{1F1F7}";
var flag_nu = "\u{1F1F3}\u{1F1FA}";
var flag_nz = "\u{1F1F3}\u{1F1FF}";
var flag_om = "\u{1F1F4}\u{1F1F2}";
var flag_pa = "\u{1F1F5}\u{1F1E6}";
var flag_pe = "\u{1F1F5}\u{1F1EA}";
var flag_pf = "\u{1F1F5}\u{1F1EB}";
var flag_pg = "\u{1F1F5}\u{1F1EC}";
var flag_ph = "\u{1F1F5}\u{1F1ED}";
var flag_pk = "\u{1F1F5}\u{1F1F0}";
var flag_pl = "\u{1F1F5}\u{1F1F1}";
var flag_pm = "\u{1F1F5}\u{1F1F2}";
var flag_pn = "\u{1F1F5}\u{1F1F3}";
var flag_pr = "\u{1F1F5}\u{1F1F7}";
var flag_ps = "\u{1F1F5}\u{1F1F8}";
var flag_pt = "\u{1F1F5}\u{1F1F9}";
var flag_pw = "\u{1F1F5}\u{1F1FC}";
var flag_py = "\u{1F1F5}\u{1F1FE}";
var flag_qa = "\u{1F1F6}\u{1F1E6}";
var flag_re = "\u{1F1F7}\u{1F1EA}";
var flag_ro = "\u{1F1F7}\u{1F1F4}";
var flag_rs = "\u{1F1F7}\u{1F1F8}";
var ru = "\u{1F1F7}\u{1F1FA}";
var flag_ru = "\u{1F1F7}\u{1F1FA}";
var flag_rw = "\u{1F1F7}\u{1F1FC}";
var flag_sa = "\u{1F1F8}\u{1F1E6}";
var flag_sb = "\u{1F1F8}\u{1F1E7}";
var flag_sc = "\u{1F1F8}\u{1F1E8}";
var flag_sd = "\u{1F1F8}\u{1F1E9}";
var flag_se = "\u{1F1F8}\u{1F1EA}";
var flag_sg = "\u{1F1F8}\u{1F1EC}";
var flag_sh = "\u{1F1F8}\u{1F1ED}";
var flag_si = "\u{1F1F8}\u{1F1EE}";
var flag_sj = "\u{1F1F8}\u{1F1EF}";
var flag_sk = "\u{1F1F8}\u{1F1F0}";
var flag_sl = "\u{1F1F8}\u{1F1F1}";
var flag_sm = "\u{1F1F8}\u{1F1F2}";
var flag_sn = "\u{1F1F8}\u{1F1F3}";
var flag_so = "\u{1F1F8}\u{1F1F4}";
var flag_sr = "\u{1F1F8}\u{1F1F7}";
var flag_ss = "\u{1F1F8}\u{1F1F8}";
var flag_st = "\u{1F1F8}\u{1F1F9}";
var flag_sv = "\u{1F1F8}\u{1F1FB}";
var flag_sx = "\u{1F1F8}\u{1F1FD}";
var flag_sy = "\u{1F1F8}\u{1F1FE}";
var flag_sz = "\u{1F1F8}\u{1F1FF}";
var flag_ta = "\u{1F1F9}\u{1F1E6}";
var flag_tc = "\u{1F1F9}\u{1F1E8}";
var flag_td = "\u{1F1F9}\u{1F1E9}";
var flag_tf = "\u{1F1F9}\u{1F1EB}";
var flag_tg = "\u{1F1F9}\u{1F1EC}";
var flag_th = "\u{1F1F9}\u{1F1ED}";
var flag_tj = "\u{1F1F9}\u{1F1EF}";
var flag_tk = "\u{1F1F9}\u{1F1F0}";
var flag_tl = "\u{1F1F9}\u{1F1F1}";
var flag_tm = "\u{1F1F9}\u{1F1F2}";
var flag_tn = "\u{1F1F9}\u{1F1F3}";
var flag_to = "\u{1F1F9}\u{1F1F4}";
var flag_tr = "\u{1F1F9}\u{1F1F7}";
var flag_tt = "\u{1F1F9}\u{1F1F9}";
var flag_tv = "\u{1F1F9}\u{1F1FB}";
var flag_tw = "\u{1F1F9}\u{1F1FC}";
var flag_tz = "\u{1F1F9}\u{1F1FF}";
var flag_ua = "\u{1F1FA}\u{1F1E6}";
var flag_ug = "\u{1F1FA}\u{1F1EC}";
var flag_um = "\u{1F1FA}\u{1F1F2}";
var flag_un = "\u{1F1FA}\u{1F1F3}";
var us = "\u{1F1FA}\u{1F1F8}";
var flag_us = "\u{1F1FA}\u{1F1F8}";
var flag_uy = "\u{1F1FA}\u{1F1FE}";
var flag_uz = "\u{1F1FA}\u{1F1FF}";
var flag_va = "\u{1F1FB}\u{1F1E6}";
var flag_vc = "\u{1F1FB}\u{1F1E8}";
var flag_ve = "\u{1F1FB}\u{1F1EA}";
var flag_vg = "\u{1F1FB}\u{1F1EC}";
var flag_vi = "\u{1F1FB}\u{1F1EE}";
var flag_vn = "\u{1F1FB}\u{1F1F3}";
var flag_vu = "\u{1F1FB}\u{1F1FA}";
var flag_wf = "\u{1F1FC}\u{1F1EB}";
var flag_ws = "\u{1F1FC}\u{1F1F8}";
var flag_xk = "\u{1F1FD}\u{1F1F0}";
var flag_ye = "\u{1F1FE}\u{1F1EA}";
var flag_yt = "\u{1F1FE}\u{1F1F9}";
var flag_za = "\u{1F1FF}\u{1F1E6}";
var flag_zm = "\u{1F1FF}\u{1F1F2}";
var flag_zw = "\u{1F1FF}\u{1F1FC}";
var koko = "\u{1F201}";
var sa = "\u{1F202}\uFE0F";
var u7121 = "\u{1F21A}";
var u6307 = "\u{1F22F}";
var u7981 = "\u{1F232}";
var u7a7a = "\u{1F233}";
var u5408 = "\u{1F234}";
var u6e80 = "\u{1F235}";
var u6709 = "\u{1F236}";
var u6708 = "\u{1F237}\uFE0F";
var u7533 = "\u{1F238}";
var u5272 = "\u{1F239}";
var u55b6 = "\u{1F23A}";
var ideograph_advantage = "\u{1F250}";
var accept = "\u{1F251}";
var cyclone = "\u{1F300}";
var foggy = "\u{1F301}";
var closed_umbrella = "\u{1F302}";
var night_with_stars = "\u{1F303}";
var sunrise_over_mountains = "\u{1F304}";
var sunrise = "\u{1F305}";
var city_sunset = "\u{1F306}";
var city_sunrise = "\u{1F307}";
var rainbow = "\u{1F308}";
var bridge_at_night = "\u{1F309}";
var ocean = "\u{1F30A}";
var volcano = "\u{1F30B}";
var milky_way = "\u{1F30C}";
var earth_africa = "\u{1F30D}";
var earth_americas = "\u{1F30E}";
var earth_asia = "\u{1F30F}";
var globe_with_meridians = "\u{1F310}";
var new_moon = "\u{1F311}";
var waxing_crescent_moon = "\u{1F312}";
var first_quarter_moon = "\u{1F313}";
var moon = "\u{1F314}";
var waxing_gibbous_moon = "\u{1F314}";
var full_moon = "\u{1F315}";
var waning_gibbous_moon = "\u{1F316}";
var last_quarter_moon = "\u{1F317}";
var waning_crescent_moon = "\u{1F318}";
var crescent_moon = "\u{1F319}";
var new_moon_with_face = "\u{1F31A}";
var first_quarter_moon_with_face = "\u{1F31B}";
var last_quarter_moon_with_face = "\u{1F31C}";
var full_moon_with_face = "\u{1F31D}";
var sun_with_face = "\u{1F31E}";
var star2 = "\u{1F31F}";
var stars = "\u{1F320}";
var thermometer = "\u{1F321}\uFE0F";
var mostly_sunny = "\u{1F324}\uFE0F";
var sun_small_cloud = "\u{1F324}\uFE0F";
var barely_sunny = "\u{1F325}\uFE0F";
var sun_behind_cloud = "\u{1F325}\uFE0F";
var partly_sunny_rain = "\u{1F326}\uFE0F";
var sun_behind_rain_cloud = "\u{1F326}\uFE0F";
var rain_cloud = "\u{1F327}\uFE0F";
var snow_cloud = "\u{1F328}\uFE0F";
var lightning = "\u{1F329}\uFE0F";
var lightning_cloud = "\u{1F329}\uFE0F";
var tornado = "\u{1F32A}\uFE0F";
var tornado_cloud = "\u{1F32A}\uFE0F";
var fog = "\u{1F32B}\uFE0F";
var wind_blowing_face = "\u{1F32C}\uFE0F";
var hotdog = "\u{1F32D}";
var taco = "\u{1F32E}";
var burrito = "\u{1F32F}";
var chestnut = "\u{1F330}";
var seedling = "\u{1F331}";
var evergreen_tree = "\u{1F332}";
var deciduous_tree = "\u{1F333}";
var palm_tree = "\u{1F334}";
var cactus = "\u{1F335}";
var hot_pepper = "\u{1F336}\uFE0F";
var tulip = "\u{1F337}";
var cherry_blossom = "\u{1F338}";
var rose = "\u{1F339}";
var hibiscus = "\u{1F33A}";
var sunflower = "\u{1F33B}";
var blossom = "\u{1F33C}";
var corn = "\u{1F33D}";
var ear_of_rice = "\u{1F33E}";
var herb = "\u{1F33F}";
var four_leaf_clover = "\u{1F340}";
var maple_leaf = "\u{1F341}";
var fallen_leaf = "\u{1F342}";
var leaves = "\u{1F343}";
var mushroom = "\u{1F344}";
var tomato = "\u{1F345}";
var eggplant = "\u{1F346}";
var grapes = "\u{1F347}";
var melon = "\u{1F348}";
var watermelon = "\u{1F349}";
var tangerine = "\u{1F34A}";
var lemon = "\u{1F34B}";
var banana = "\u{1F34C}";
var pineapple = "\u{1F34D}";
var apple = "\u{1F34E}";
var green_apple = "\u{1F34F}";
var pear = "\u{1F350}";
var peach = "\u{1F351}";
var cherries = "\u{1F352}";
var strawberry = "\u{1F353}";
var hamburger = "\u{1F354}";
var pizza = "\u{1F355}";
var meat_on_bone = "\u{1F356}";
var poultry_leg = "\u{1F357}";
var rice_cracker = "\u{1F358}";
var rice_ball = "\u{1F359}";
var rice = "\u{1F35A}";
var curry = "\u{1F35B}";
var ramen = "\u{1F35C}";
var spaghetti = "\u{1F35D}";
var bread = "\u{1F35E}";
var fries = "\u{1F35F}";
var sweet_potato = "\u{1F360}";
var dango = "\u{1F361}";
var oden = "\u{1F362}";
var sushi = "\u{1F363}";
var fried_shrimp = "\u{1F364}";
var fish_cake = "\u{1F365}";
var icecream = "\u{1F366}";
var shaved_ice = "\u{1F367}";
var ice_cream = "\u{1F368}";
var doughnut = "\u{1F369}";
var cookie = "\u{1F36A}";
var chocolate_bar = "\u{1F36B}";
var candy = "\u{1F36C}";
var lollipop = "\u{1F36D}";
var custard = "\u{1F36E}";
var honey_pot = "\u{1F36F}";
var cake = "\u{1F370}";
var bento = "\u{1F371}";
var stew = "\u{1F372}";
var fried_egg = "\u{1F373}";
var cooking = "\u{1F373}";
var fork_and_knife = "\u{1F374}";
var tea = "\u{1F375}";
var sake = "\u{1F376}";
var wine_glass = "\u{1F377}";
var cocktail = "\u{1F378}";
var tropical_drink = "\u{1F379}";
var beer = "\u{1F37A}";
var beers = "\u{1F37B}";
var baby_bottle = "\u{1F37C}";
var knife_fork_plate = "\u{1F37D}\uFE0F";
var champagne = "\u{1F37E}";
var popcorn = "\u{1F37F}";
var ribbon = "\u{1F380}";
var gift = "\u{1F381}";
var birthday = "\u{1F382}";
var jack_o_lantern = "\u{1F383}";
var christmas_tree = "\u{1F384}";
var santa = "\u{1F385}";
var fireworks = "\u{1F386}";
var sparkler = "\u{1F387}";
var balloon = "\u{1F388}";
var tada = "\u{1F389}";
var confetti_ball = "\u{1F38A}";
var tanabata_tree = "\u{1F38B}";
var crossed_flags = "\u{1F38C}";
var bamboo = "\u{1F38D}";
var dolls = "\u{1F38E}";
var flags = "\u{1F38F}";
var wind_chime = "\u{1F390}";
var rice_scene = "\u{1F391}";
var school_satchel = "\u{1F392}";
var mortar_board = "\u{1F393}";
var medal = "\u{1F396}\uFE0F";
var reminder_ribbon = "\u{1F397}\uFE0F";
var studio_microphone = "\u{1F399}\uFE0F";
var level_slider = "\u{1F39A}\uFE0F";
var control_knobs = "\u{1F39B}\uFE0F";
var film_frames = "\u{1F39E}\uFE0F";
var admission_tickets = "\u{1F39F}\uFE0F";
var carousel_horse = "\u{1F3A0}";
var ferris_wheel = "\u{1F3A1}";
var roller_coaster = "\u{1F3A2}";
var fishing_pole_and_fish = "\u{1F3A3}";
var microphone = "\u{1F3A4}";
var movie_camera = "\u{1F3A5}";
var cinema = "\u{1F3A6}";
var headphones = "\u{1F3A7}";
var art = "\u{1F3A8}";
var tophat = "\u{1F3A9}";
var circus_tent = "\u{1F3AA}";
var ticket = "\u{1F3AB}";
var clapper = "\u{1F3AC}";
var performing_arts = "\u{1F3AD}";
var video_game = "\u{1F3AE}";
var dart = "\u{1F3AF}";
var slot_machine = "\u{1F3B0}";
var _ball = "\u{1F3B1}";
var game_die = "\u{1F3B2}";
var bowling = "\u{1F3B3}";
var flower_playing_cards = "\u{1F3B4}";
var musical_note = "\u{1F3B5}";
var notes = "\u{1F3B6}";
var saxophone = "\u{1F3B7}";
var guitar = "\u{1F3B8}";
var musical_keyboard = "\u{1F3B9}";
var trumpet = "\u{1F3BA}";
var violin = "\u{1F3BB}";
var musical_score = "\u{1F3BC}";
var running_shirt_with_sash = "\u{1F3BD}";
var tennis = "\u{1F3BE}";
var ski = "\u{1F3BF}";
var basketball = "\u{1F3C0}";
var checkered_flag = "\u{1F3C1}";
var snowboarder = "\u{1F3C2}";
var woman_running = "\u{1F3C3}\u200D\u2640\uFE0F";
var man_running = "\u{1F3C3}\u200D\u2642\uFE0F";
var runner = "\u{1F3C3}\u200D\u2642\uFE0F";
var running = "\u{1F3C3}\u200D\u2642\uFE0F";
var woman_surfing = "\u{1F3C4}\u200D\u2640\uFE0F";
var man_surfing = "\u{1F3C4}\u200D\u2642\uFE0F";
var surfer = "\u{1F3C4}\u200D\u2642\uFE0F";
var sports_medal = "\u{1F3C5}";
var trophy = "\u{1F3C6}";
var horse_racing = "\u{1F3C7}";
var football = "\u{1F3C8}";
var rugby_football = "\u{1F3C9}";
var woman_swimming = "\u{1F3CA}\u200D\u2640\uFE0F";
var man_swimming = "\u{1F3CA}\u200D\u2642\uFE0F";
var swimmer = "\u{1F3CA}\u200D\u2642\uFE0F";
var woman_lifting_weights = "\u{1F3CB}\uFE0F\u200D\u2640\uFE0F";
var man_lifting_weights = "\u{1F3CB}\uFE0F\u200D\u2642\uFE0F";
var weight_lifter = "\u{1F3CB}\uFE0F\u200D\u2642\uFE0F";
var woman_golfing = "\u{1F3CC}\uFE0F\u200D\u2640\uFE0F";
var man_golfing = "\u{1F3CC}\uFE0F\u200D\u2642\uFE0F";
var golfer = "\u{1F3CC}\uFE0F\u200D\u2642\uFE0F";
var racing_motorcycle = "\u{1F3CD}\uFE0F";
var racing_car = "\u{1F3CE}\uFE0F";
var cricket_bat_and_ball = "\u{1F3CF}";
var volleyball = "\u{1F3D0}";
var field_hockey_stick_and_ball = "\u{1F3D1}";
var ice_hockey_stick_and_puck = "\u{1F3D2}";
var table_tennis_paddle_and_ball = "\u{1F3D3}";
var snow_capped_mountain = "\u{1F3D4}\uFE0F";
var camping = "\u{1F3D5}\uFE0F";
var beach_with_umbrella = "\u{1F3D6}\uFE0F";
var building_construction = "\u{1F3D7}\uFE0F";
var house_buildings = "\u{1F3D8}\uFE0F";
var cityscape = "\u{1F3D9}\uFE0F";
var derelict_house_building = "\u{1F3DA}\uFE0F";
var classical_building = "\u{1F3DB}\uFE0F";
var desert = "\u{1F3DC}\uFE0F";
var desert_island = "\u{1F3DD}\uFE0F";
var national_park = "\u{1F3DE}\uFE0F";
var stadium = "\u{1F3DF}\uFE0F";
var house = "\u{1F3E0}";
var house_with_garden = "\u{1F3E1}";
var office = "\u{1F3E2}";
var post_office = "\u{1F3E3}";
var european_post_office = "\u{1F3E4}";
var hospital = "\u{1F3E5}";
var bank = "\u{1F3E6}";
var atm = "\u{1F3E7}";
var hotel = "\u{1F3E8}";
var love_hotel = "\u{1F3E9}";
var convenience_store = "\u{1F3EA}";
var school = "\u{1F3EB}";
var department_store = "\u{1F3EC}";
var factory = "\u{1F3ED}";
var izakaya_lantern = "\u{1F3EE}";
var lantern = "\u{1F3EE}";
var japanese_castle = "\u{1F3EF}";
var european_castle = "\u{1F3F0}";
var rainbow_flag = "\u{1F3F3}\uFE0F\u200D\u{1F308}";
var transgender_flag = "\u{1F3F3}\uFE0F\u200D\u26A7\uFE0F";
var waving_white_flag = "\u{1F3F3}\uFE0F";
var pirate_flag = "\u{1F3F4}\u200D\u2620\uFE0F";
var flag_england = "\u{1F3F4}\u{E0067}\u{E0062}\u{E0065}\u{E006E}\u{E0067}\u{E007F}";
var flag_scotland = "\u{1F3F4}\u{E0067}\u{E0062}\u{E0073}\u{E0063}\u{E0074}\u{E007F}";
var flag_wales = "\u{1F3F4}\u{E0067}\u{E0062}\u{E0077}\u{E006C}\u{E0073}\u{E007F}";
var waving_black_flag = "\u{1F3F4}";
var rosette = "\u{1F3F5}\uFE0F";
var label = "\u{1F3F7}\uFE0F";
var badminton_racquet_and_shuttlecock = "\u{1F3F8}";
var bow_and_arrow = "\u{1F3F9}";
var amphora = "\u{1F3FA}";
var skin_tone_2 = "\u{1F3FB}";
var skin_tone_3 = "\u{1F3FC}";
var skin_tone_4 = "\u{1F3FD}";
var skin_tone_5 = "\u{1F3FE}";
var skin_tone_6 = "\u{1F3FF}";
var rat = "\u{1F400}";
var mouse2 = "\u{1F401}";
var ox = "\u{1F402}";
var water_buffalo = "\u{1F403}";
var cow2 = "\u{1F404}";
var tiger2 = "\u{1F405}";
var leopard = "\u{1F406}";
var rabbit2 = "\u{1F407}";
var black_cat = "\u{1F408}\u200D\u2B1B";
var cat2 = "\u{1F408}";
var dragon = "\u{1F409}";
var crocodile = "\u{1F40A}";
var whale2 = "\u{1F40B}";
var snail = "\u{1F40C}";
var snake = "\u{1F40D}";
var racehorse = "\u{1F40E}";
var ram = "\u{1F40F}";
var goat = "\u{1F410}";
var sheep = "\u{1F411}";
var monkey = "\u{1F412}";
var rooster = "\u{1F413}";
var chicken = "\u{1F414}";
var service_dog = "\u{1F415}\u200D\u{1F9BA}";
var dog2 = "\u{1F415}";
var pig2 = "\u{1F416}";
var boar = "\u{1F417}";
var elephant = "\u{1F418}";
var octopus = "\u{1F419}";
var shell = "\u{1F41A}";
var bug = "\u{1F41B}";
var ant = "\u{1F41C}";
var bee = "\u{1F41D}";
var honeybee = "\u{1F41D}";
var ladybug = "\u{1F41E}";
var lady_beetle = "\u{1F41E}";
var fish = "\u{1F41F}";
var tropical_fish = "\u{1F420}";
var blowfish = "\u{1F421}";
var turtle = "\u{1F422}";
var hatching_chick = "\u{1F423}";
var baby_chick = "\u{1F424}";
var hatched_chick = "\u{1F425}";
var bird = "\u{1F426}";
var penguin = "\u{1F427}";
var koala = "\u{1F428}";
var poodle = "\u{1F429}";
var dromedary_camel = "\u{1F42A}";
var camel = "\u{1F42B}";
var dolphin = "\u{1F42C}";
var flipper = "\u{1F42C}";
var mouse = "\u{1F42D}";
var cow = "\u{1F42E}";
var tiger = "\u{1F42F}";
var rabbit = "\u{1F430}";
var cat = "\u{1F431}";
var dragon_face = "\u{1F432}";
var whale = "\u{1F433}";
var horse = "\u{1F434}";
var monkey_face = "\u{1F435}";
var dog = "\u{1F436}";
var pig = "\u{1F437}";
var frog = "\u{1F438}";
var hamster = "\u{1F439}";
var wolf = "\u{1F43A}";
var polar_bear = "\u{1F43B}\u200D\u2744\uFE0F";
var bear = "\u{1F43B}";
var panda_face = "\u{1F43C}";
var pig_nose = "\u{1F43D}";
var feet = "\u{1F43E}";
var paw_prints = "\u{1F43E}";
var chipmunk = "\u{1F43F}\uFE0F";
var eyes = "\u{1F440}";
var eye_in_speech_bubble = "\u{1F441}\uFE0F\u200D\u{1F5E8}\uFE0F";
var eye = "\u{1F441}\uFE0F";
var ear = "\u{1F442}";
var nose = "\u{1F443}";
var lips = "\u{1F444}";
var tongue = "\u{1F445}";
var point_up_2 = "\u{1F446}";
var point_down = "\u{1F447}";
var point_left = "\u{1F448}";
var point_right = "\u{1F449}";
var facepunch = "\u{1F44A}";
var punch = "\u{1F44A}";
var wave = "\u{1F44B}";
var ok_hand = "\u{1F44C}";
var _1 = "\u{1F44D}";
var thumbsup = "\u{1F44D}";
var _12 = "\u{1F44E}";
var thumbsdown = "\u{1F44E}";
var clap = "\u{1F44F}";
var open_hands = "\u{1F450}";
var crown = "\u{1F451}";
var womans_hat = "\u{1F452}";
var eyeglasses = "\u{1F453}";
var necktie = "\u{1F454}";
var shirt = "\u{1F455}";
var tshirt = "\u{1F455}";
var jeans = "\u{1F456}";
var dress = "\u{1F457}";
var kimono = "\u{1F458}";
var bikini = "\u{1F459}";
var womans_clothes = "\u{1F45A}";
var purse = "\u{1F45B}";
var handbag = "\u{1F45C}";
var pouch = "\u{1F45D}";
var mans_shoe = "\u{1F45E}";
var shoe = "\u{1F45E}";
var athletic_shoe = "\u{1F45F}";
var high_heel = "\u{1F460}";
var sandal = "\u{1F461}";
var boot = "\u{1F462}";
var footprints = "\u{1F463}";
var bust_in_silhouette = "\u{1F464}";
var busts_in_silhouette = "\u{1F465}";
var boy = "\u{1F466}";
var girl = "\u{1F467}";
var male_farmer = "\u{1F468}\u200D\u{1F33E}";
var male_cook = "\u{1F468}\u200D\u{1F373}";
var man_feeding_baby = "\u{1F468}\u200D\u{1F37C}";
var male_student = "\u{1F468}\u200D\u{1F393}";
var male_singer = "\u{1F468}\u200D\u{1F3A4}";
var male_artist = "\u{1F468}\u200D\u{1F3A8}";
var male_teacher = "\u{1F468}\u200D\u{1F3EB}";
var male_factory_worker = "\u{1F468}\u200D\u{1F3ED}";
var man_boy_boy = "\u{1F468}\u200D\u{1F466}\u200D\u{1F466}";
var man_boy = "\u{1F468}\u200D\u{1F466}";
var man_girl_boy = "\u{1F468}\u200D\u{1F467}\u200D\u{1F466}";
var man_girl_girl = "\u{1F468}\u200D\u{1F467}\u200D\u{1F467}";
var man_girl = "\u{1F468}\u200D\u{1F467}";
var man_man_boy = "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}";
var man_man_boy_boy = "\u{1F468}\u200D\u{1F468}\u200D\u{1F466}\u200D\u{1F466}";
var man_man_girl = "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}";
var man_man_girl_boy = "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F466}";
var man_man_girl_girl = "\u{1F468}\u200D\u{1F468}\u200D\u{1F467}\u200D\u{1F467}";
var man_woman_boy = "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}";
var family = "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}";
var man_woman_boy_boy = "\u{1F468}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}";
var man_woman_girl = "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}";
var man_woman_girl_boy = "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}";
var man_woman_girl_girl = "\u{1F468}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}";
var male_technologist = "\u{1F468}\u200D\u{1F4BB}";
var male_office_worker = "\u{1F468}\u200D\u{1F4BC}";
var male_mechanic = "\u{1F468}\u200D\u{1F527}";
var male_scientist = "\u{1F468}\u200D\u{1F52C}";
var male_astronaut = "\u{1F468}\u200D\u{1F680}";
var male_firefighter = "\u{1F468}\u200D\u{1F692}";
var man_with_probing_cane = "\u{1F468}\u200D\u{1F9AF}";
var red_haired_man = "\u{1F468}\u200D\u{1F9B0}";
var curly_haired_man = "\u{1F468}\u200D\u{1F9B1}";
var bald_man = "\u{1F468}\u200D\u{1F9B2}";
var white_haired_man = "\u{1F468}\u200D\u{1F9B3}";
var man_in_motorized_wheelchair = "\u{1F468}\u200D\u{1F9BC}";
var man_in_manual_wheelchair = "\u{1F468}\u200D\u{1F9BD}";
var male_doctor = "\u{1F468}\u200D\u2695\uFE0F";
var male_judge = "\u{1F468}\u200D\u2696\uFE0F";
var male_pilot = "\u{1F468}\u200D\u2708\uFE0F";
var man_heart_man = "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F468}";
var man_kiss_man = "\u{1F468}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}";
var man = "\u{1F468}";
var female_farmer = "\u{1F469}\u200D\u{1F33E}";
var female_cook = "\u{1F469}\u200D\u{1F373}";
var woman_feeding_baby = "\u{1F469}\u200D\u{1F37C}";
var female_student = "\u{1F469}\u200D\u{1F393}";
var female_singer = "\u{1F469}\u200D\u{1F3A4}";
var female_artist = "\u{1F469}\u200D\u{1F3A8}";
var female_teacher = "\u{1F469}\u200D\u{1F3EB}";
var female_factory_worker = "\u{1F469}\u200D\u{1F3ED}";
var woman_boy_boy = "\u{1F469}\u200D\u{1F466}\u200D\u{1F466}";
var woman_boy = "\u{1F469}\u200D\u{1F466}";
var woman_girl_boy = "\u{1F469}\u200D\u{1F467}\u200D\u{1F466}";
var woman_girl_girl = "\u{1F469}\u200D\u{1F467}\u200D\u{1F467}";
var woman_girl = "\u{1F469}\u200D\u{1F467}";
var woman_woman_boy = "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}";
var woman_woman_boy_boy = "\u{1F469}\u200D\u{1F469}\u200D\u{1F466}\u200D\u{1F466}";
var woman_woman_girl = "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}";
var woman_woman_girl_boy = "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F466}";
var woman_woman_girl_girl = "\u{1F469}\u200D\u{1F469}\u200D\u{1F467}\u200D\u{1F467}";
var female_technologist = "\u{1F469}\u200D\u{1F4BB}";
var female_office_worker = "\u{1F469}\u200D\u{1F4BC}";
var female_mechanic = "\u{1F469}\u200D\u{1F527}";
var female_scientist = "\u{1F469}\u200D\u{1F52C}";
var female_astronaut = "\u{1F469}\u200D\u{1F680}";
var female_firefighter = "\u{1F469}\u200D\u{1F692}";
var woman_with_probing_cane = "\u{1F469}\u200D\u{1F9AF}";
var red_haired_woman = "\u{1F469}\u200D\u{1F9B0}";
var curly_haired_woman = "\u{1F469}\u200D\u{1F9B1}";
var bald_woman = "\u{1F469}\u200D\u{1F9B2}";
var white_haired_woman = "\u{1F469}\u200D\u{1F9B3}";
var woman_in_motorized_wheelchair = "\u{1F469}\u200D\u{1F9BC}";
var woman_in_manual_wheelchair = "\u{1F469}\u200D\u{1F9BD}";
var female_doctor = "\u{1F469}\u200D\u2695\uFE0F";
var female_judge = "\u{1F469}\u200D\u2696\uFE0F";
var female_pilot = "\u{1F469}\u200D\u2708\uFE0F";
var woman_heart_man = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F468}";
var woman_heart_woman = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F469}";
var woman_kiss_man = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F468}";
var woman_kiss_woman = "\u{1F469}\u200D\u2764\uFE0F\u200D\u{1F48B}\u200D\u{1F469}";
var woman = "\u{1F469}";
var man_and_woman_holding_hands = "\u{1F46B}";
var woman_and_man_holding_hands = "\u{1F46B}";
var couple = "\u{1F46B}";
var two_men_holding_hands = "\u{1F46C}";
var men_holding_hands = "\u{1F46C}";
var two_women_holding_hands = "\u{1F46D}";
var women_holding_hands = "\u{1F46D}";
var female_police_officer = "\u{1F46E}\u200D\u2640\uFE0F";
var male_police_officer = "\u{1F46E}\u200D\u2642\uFE0F";
var cop = "\u{1F46E}\u200D\u2642\uFE0F";
var women_with_bunny_ears_partying = "\u{1F46F}\u200D\u2640\uFE0F";
var woman_with_bunny_ears_partying = "\u{1F46F}\u200D\u2640\uFE0F";
var dancers = "\u{1F46F}\u200D\u2640\uFE0F";
var men_with_bunny_ears_partying = "\u{1F46F}\u200D\u2642\uFE0F";
var man_with_bunny_ears_partying = "\u{1F46F}\u200D\u2642\uFE0F";
var woman_with_veil = "\u{1F470}\u200D\u2640\uFE0F";
var man_with_veil = "\u{1F470}\u200D\u2642\uFE0F";
var bride_with_veil = "\u{1F470}";
var blond_haired_woman = "\u{1F471}\u200D\u2640\uFE0F";
var blond_haired_man = "\u{1F471}\u200D\u2642\uFE0F";
var person_with_blond_hair = "\u{1F471}\u200D\u2642\uFE0F";
var man_with_gua_pi_mao = "\u{1F472}";
var woman_wearing_turban = "\u{1F473}\u200D\u2640\uFE0F";
var man_wearing_turban = "\u{1F473}\u200D\u2642\uFE0F";
var man_with_turban = "\u{1F473}\u200D\u2642\uFE0F";
var older_man = "\u{1F474}";
var older_woman = "\u{1F475}";
var baby = "\u{1F476}";
var female_construction_worker = "\u{1F477}\u200D\u2640\uFE0F";
var male_construction_worker = "\u{1F477}\u200D\u2642\uFE0F";
var construction_worker = "\u{1F477}\u200D\u2642\uFE0F";
var princess = "\u{1F478}";
var japanese_ogre = "\u{1F479}";
var japanese_goblin = "\u{1F47A}";
var ghost = "\u{1F47B}";
var angel = "\u{1F47C}";
var alien = "\u{1F47D}";
var space_invader = "\u{1F47E}";
var imp = "\u{1F47F}";
var skull = "\u{1F480}";
var woman_tipping_hand = "\u{1F481}\u200D\u2640\uFE0F";
var information_desk_person = "\u{1F481}\u200D\u2640\uFE0F";
var man_tipping_hand = "\u{1F481}\u200D\u2642\uFE0F";
var female_guard = "\u{1F482}\u200D\u2640\uFE0F";
var male_guard = "\u{1F482}\u200D\u2642\uFE0F";
var guardsman = "\u{1F482}\u200D\u2642\uFE0F";
var dancer = "\u{1F483}";
var lipstick = "\u{1F484}";
var nail_care = "\u{1F485}";
var woman_getting_massage = "\u{1F486}\u200D\u2640\uFE0F";
var massage = "\u{1F486}\u200D\u2640\uFE0F";
var man_getting_massage = "\u{1F486}\u200D\u2642\uFE0F";
var woman_getting_haircut = "\u{1F487}\u200D\u2640\uFE0F";
var haircut = "\u{1F487}\u200D\u2640\uFE0F";
var man_getting_haircut = "\u{1F487}\u200D\u2642\uFE0F";
var barber = "\u{1F488}";
var syringe = "\u{1F489}";
var pill = "\u{1F48A}";
var kiss = "\u{1F48B}";
var love_letter = "\u{1F48C}";
var ring = "\u{1F48D}";
var gem = "\u{1F48E}";
var couplekiss = "\u{1F48F}";
var bouquet = "\u{1F490}";
var couple_with_heart = "\u{1F491}";
var wedding = "\u{1F492}";
var heartbeat = "\u{1F493}";
var broken_heart = "\u{1F494}";
var two_hearts = "\u{1F495}";
var sparkling_heart = "\u{1F496}";
var heartpulse = "\u{1F497}";
var cupid = "\u{1F498}";
var blue_heart = "\u{1F499}";
var green_heart = "\u{1F49A}";
var yellow_heart = "\u{1F49B}";
var purple_heart = "\u{1F49C}";
var gift_heart = "\u{1F49D}";
var revolving_hearts = "\u{1F49E}";
var heart_decoration = "\u{1F49F}";
var diamond_shape_with_a_dot_inside = "\u{1F4A0}";
var bulb = "\u{1F4A1}";
var anger = "\u{1F4A2}";
var bomb = "\u{1F4A3}";
var zzz = "\u{1F4A4}";
var boom = "\u{1F4A5}";
var collision = "\u{1F4A5}";
var sweat_drops = "\u{1F4A6}";
var droplet = "\u{1F4A7}";
var dash = "\u{1F4A8}";
var hankey = "\u{1F4A9}";
var poop = "\u{1F4A9}";
var shit = "\u{1F4A9}";
var muscle = "\u{1F4AA}";
var dizzy = "\u{1F4AB}";
var speech_balloon = "\u{1F4AC}";
var thought_balloon = "\u{1F4AD}";
var white_flower = "\u{1F4AE}";
var moneybag = "\u{1F4B0}";
var currency_exchange = "\u{1F4B1}";
var heavy_dollar_sign = "\u{1F4B2}";
var credit_card = "\u{1F4B3}";
var yen = "\u{1F4B4}";
var dollar = "\u{1F4B5}";
var euro = "\u{1F4B6}";
var pound = "\u{1F4B7}";
var money_with_wings = "\u{1F4B8}";
var chart = "\u{1F4B9}";
var seat = "\u{1F4BA}";
var computer = "\u{1F4BB}";
var briefcase = "\u{1F4BC}";
var minidisc = "\u{1F4BD}";
var floppy_disk = "\u{1F4BE}";
var cd = "\u{1F4BF}";
var dvd = "\u{1F4C0}";
var file_folder = "\u{1F4C1}";
var open_file_folder = "\u{1F4C2}";
var page_with_curl = "\u{1F4C3}";
var page_facing_up = "\u{1F4C4}";
var date = "\u{1F4C5}";
var calendar = "\u{1F4C6}";
var card_index = "\u{1F4C7}";
var chart_with_upwards_trend = "\u{1F4C8}";
var chart_with_downwards_trend = "\u{1F4C9}";
var bar_chart = "\u{1F4CA}";
var clipboard = "\u{1F4CB}";
var pushpin = "\u{1F4CC}";
var round_pushpin = "\u{1F4CD}";
var paperclip = "\u{1F4CE}";
var straight_ruler = "\u{1F4CF}";
var triangular_ruler = "\u{1F4D0}";
var bookmark_tabs = "\u{1F4D1}";
var ledger = "\u{1F4D2}";
var notebook = "\u{1F4D3}";
var notebook_with_decorative_cover = "\u{1F4D4}";
var closed_book = "\u{1F4D5}";
var book = "\u{1F4D6}";
var open_book = "\u{1F4D6}";
var green_book = "\u{1F4D7}";
var blue_book = "\u{1F4D8}";
var orange_book = "\u{1F4D9}";
var books = "\u{1F4DA}";
var name_badge = "\u{1F4DB}";
var scroll = "\u{1F4DC}";
var memo = "\u{1F4DD}";
var pencil = "\u{1F4DD}";
var telephone_receiver = "\u{1F4DE}";
var pager = "\u{1F4DF}";
var fax = "\u{1F4E0}";
var satellite_antenna = "\u{1F4E1}";
var loudspeaker = "\u{1F4E2}";
var mega = "\u{1F4E3}";
var outbox_tray = "\u{1F4E4}";
var inbox_tray = "\u{1F4E5}";
var package2 = "\u{1F4E6}";
var e_mail = "\u{1F4E7}";
var incoming_envelope = "\u{1F4E8}";
var envelope_with_arrow = "\u{1F4E9}";
var mailbox_closed = "\u{1F4EA}";
var mailbox = "\u{1F4EB}";
var mailbox_with_mail = "\u{1F4EC}";
var mailbox_with_no_mail = "\u{1F4ED}";
var postbox = "\u{1F4EE}";
var postal_horn = "\u{1F4EF}";
var newspaper = "\u{1F4F0}";
var iphone = "\u{1F4F1}";
var calling = "\u{1F4F2}";
var vibration_mode = "\u{1F4F3}";
var mobile_phone_off = "\u{1F4F4}";
var no_mobile_phones = "\u{1F4F5}";
var signal_strength = "\u{1F4F6}";
var camera = "\u{1F4F7}";
var camera_with_flash = "\u{1F4F8}";
var video_camera = "\u{1F4F9}";
var tv = "\u{1F4FA}";
var radio = "\u{1F4FB}";
var vhs = "\u{1F4FC}";
var film_projector = "\u{1F4FD}\uFE0F";
var prayer_beads = "\u{1F4FF}";
var twisted_rightwards_arrows = "\u{1F500}";
var repeat = "\u{1F501}";
var repeat_one = "\u{1F502}";
var arrows_clockwise = "\u{1F503}";
var arrows_counterclockwise = "\u{1F504}";
var low_brightness = "\u{1F505}";
var high_brightness = "\u{1F506}";
var mute = "\u{1F507}";
var speaker = "\u{1F508}";
var sound = "\u{1F509}";
var loud_sound = "\u{1F50A}";
var battery = "\u{1F50B}";
var electric_plug = "\u{1F50C}";
var mag = "\u{1F50D}";
var mag_right = "\u{1F50E}";
var lock_with_ink_pen = "\u{1F50F}";
var closed_lock_with_key = "\u{1F510}";
var key = "\u{1F511}";
var lock = "\u{1F512}";
var unlock = "\u{1F513}";
var bell = "\u{1F514}";
var no_bell = "\u{1F515}";
var bookmark = "\u{1F516}";
var link = "\u{1F517}";
var radio_button = "\u{1F518}";
var back = "\u{1F519}";
var end = "\u{1F51A}";
var on = "\u{1F51B}";
var soon = "\u{1F51C}";
var top = "\u{1F51D}";
var underage = "\u{1F51E}";
var keycap_ten = "\u{1F51F}";
var capital_abcd = "\u{1F520}";
var abcd = "\u{1F521}";
var symbols = "\u{1F523}";
var abc = "\u{1F524}";
var fire = "\u{1F525}";
var flashlight = "\u{1F526}";
var wrench = "\u{1F527}";
var hammer = "\u{1F528}";
var nut_and_bolt = "\u{1F529}";
var hocho = "\u{1F52A}";
var knife = "\u{1F52A}";
var gun = "\u{1F52B}";
var microscope = "\u{1F52C}";
var telescope = "\u{1F52D}";
var crystal_ball = "\u{1F52E}";
var six_pointed_star = "\u{1F52F}";
var beginner = "\u{1F530}";
var trident = "\u{1F531}";
var black_square_button = "\u{1F532}";
var white_square_button = "\u{1F533}";
var red_circle = "\u{1F534}";
var large_blue_circle = "\u{1F535}";
var large_orange_diamond = "\u{1F536}";
var large_blue_diamond = "\u{1F537}";
var small_orange_diamond = "\u{1F538}";
var small_blue_diamond = "\u{1F539}";
var small_red_triangle = "\u{1F53A}";
var small_red_triangle_down = "\u{1F53B}";
var arrow_up_small = "\u{1F53C}";
var arrow_down_small = "\u{1F53D}";
var om_symbol = "\u{1F549}\uFE0F";
var dove_of_peace = "\u{1F54A}\uFE0F";
var kaaba = "\u{1F54B}";
var mosque = "\u{1F54C}";
var synagogue = "\u{1F54D}";
var menorah_with_nine_branches = "\u{1F54E}";
var clock1 = "\u{1F550}";
var clock2 = "\u{1F551}";
var clock3 = "\u{1F552}";
var clock4 = "\u{1F553}";
var clock5 = "\u{1F554}";
var clock6 = "\u{1F555}";
var clock7 = "\u{1F556}";
var clock8 = "\u{1F557}";
var clock9 = "\u{1F558}";
var clock10 = "\u{1F559}";
var clock11 = "\u{1F55A}";
var clock12 = "\u{1F55B}";
var clock130 = "\u{1F55C}";
var clock230 = "\u{1F55D}";
var clock330 = "\u{1F55E}";
var clock430 = "\u{1F55F}";
var clock530 = "\u{1F560}";
var clock630 = "\u{1F561}";
var clock730 = "\u{1F562}";
var clock830 = "\u{1F563}";
var clock930 = "\u{1F564}";
var clock1030 = "\u{1F565}";
var clock1130 = "\u{1F566}";
var clock1230 = "\u{1F567}";
var candle = "\u{1F56F}\uFE0F";
var mantelpiece_clock = "\u{1F570}\uFE0F";
var hole = "\u{1F573}\uFE0F";
var man_in_business_suit_levitating = "\u{1F574}\uFE0F";
var female_detective = "\u{1F575}\uFE0F\u200D\u2640\uFE0F";
var male_detective = "\u{1F575}\uFE0F\u200D\u2642\uFE0F";
var sleuth_or_spy = "\u{1F575}\uFE0F\u200D\u2642\uFE0F";
var dark_sunglasses = "\u{1F576}\uFE0F";
var spider = "\u{1F577}\uFE0F";
var spider_web = "\u{1F578}\uFE0F";
var joystick = "\u{1F579}\uFE0F";
var man_dancing = "\u{1F57A}";
var linked_paperclips = "\u{1F587}\uFE0F";
var lower_left_ballpoint_pen = "\u{1F58A}\uFE0F";
var lower_left_fountain_pen = "\u{1F58B}\uFE0F";
var lower_left_paintbrush = "\u{1F58C}\uFE0F";
var lower_left_crayon = "\u{1F58D}\uFE0F";
var raised_hand_with_fingers_splayed = "\u{1F590}\uFE0F";
var middle_finger = "\u{1F595}";
var reversed_hand_with_middle_finger_extended = "\u{1F595}";
var spock_hand = "\u{1F596}";
var black_heart = "\u{1F5A4}";
var desktop_computer = "\u{1F5A5}\uFE0F";
var printer = "\u{1F5A8}\uFE0F";
var three_button_mouse = "\u{1F5B1}\uFE0F";
var trackball = "\u{1F5B2}\uFE0F";
var frame_with_picture = "\u{1F5BC}\uFE0F";
var card_index_dividers = "\u{1F5C2}\uFE0F";
var card_file_box = "\u{1F5C3}\uFE0F";
var file_cabinet = "\u{1F5C4}\uFE0F";
var wastebasket = "\u{1F5D1}\uFE0F";
var spiral_note_pad = "\u{1F5D2}\uFE0F";
var spiral_calendar_pad = "\u{1F5D3}\uFE0F";
var compression = "\u{1F5DC}\uFE0F";
var old_key = "\u{1F5DD}\uFE0F";
var rolled_up_newspaper = "\u{1F5DE}\uFE0F";
var dagger_knife = "\u{1F5E1}\uFE0F";
var speaking_head_in_silhouette = "\u{1F5E3}\uFE0F";
var left_speech_bubble = "\u{1F5E8}\uFE0F";
var right_anger_bubble = "\u{1F5EF}\uFE0F";
var ballot_box_with_ballot = "\u{1F5F3}\uFE0F";
var world_map = "\u{1F5FA}\uFE0F";
var mount_fuji = "\u{1F5FB}";
var tokyo_tower = "\u{1F5FC}";
var statue_of_liberty = "\u{1F5FD}";
var japan = "\u{1F5FE}";
var moyai = "\u{1F5FF}";
var grinning = "\u{1F600}";
var grin = "\u{1F601}";
var joy = "\u{1F602}";
var smiley = "\u{1F603}";
var smile = "\u{1F604}";
var sweat_smile = "\u{1F605}";
var laughing = "\u{1F606}";
var satisfied = "\u{1F606}";
var innocent = "\u{1F607}";
var smiling_imp = "\u{1F608}";
var wink = "\u{1F609}";
var blush = "\u{1F60A}";
var yum = "\u{1F60B}";
var relieved = "\u{1F60C}";
var heart_eyes = "\u{1F60D}";
var sunglasses = "\u{1F60E}";
var smirk = "\u{1F60F}";
var neutral_face = "\u{1F610}";
var expressionless = "\u{1F611}";
var unamused = "\u{1F612}";
var sweat = "\u{1F613}";
var pensive = "\u{1F614}";
var confused = "\u{1F615}";
var confounded = "\u{1F616}";
var kissing = "\u{1F617}";
var kissing_heart = "\u{1F618}";
var kissing_smiling_eyes = "\u{1F619}";
var kissing_closed_eyes = "\u{1F61A}";
var stuck_out_tongue = "\u{1F61B}";
var stuck_out_tongue_winking_eye = "\u{1F61C}";
var stuck_out_tongue_closed_eyes = "\u{1F61D}";
var disappointed = "\u{1F61E}";
var worried = "\u{1F61F}";
var angry = "\u{1F620}";
var rage = "\u{1F621}";
var cry = "\u{1F622}";
var persevere = "\u{1F623}";
var triumph = "\u{1F624}";
var disappointed_relieved = "\u{1F625}";
var frowning = "\u{1F626}";
var anguished = "\u{1F627}";
var fearful = "\u{1F628}";
var weary = "\u{1F629}";
var sleepy = "\u{1F62A}";
var tired_face = "\u{1F62B}";
var grimacing = "\u{1F62C}";
var sob = "\u{1F62D}";
var face_exhaling = "\u{1F62E}\u200D\u{1F4A8}";
var open_mouth = "\u{1F62E}";
var hushed = "\u{1F62F}";
var cold_sweat = "\u{1F630}";
var scream = "\u{1F631}";
var astonished = "\u{1F632}";
var flushed = "\u{1F633}";
var sleeping = "\u{1F634}";
var face_with_spiral_eyes = "\u{1F635}\u200D\u{1F4AB}";
var dizzy_face = "\u{1F635}";
var face_in_clouds = "\u{1F636}\u200D\u{1F32B}\uFE0F";
var no_mouth = "\u{1F636}";
var mask = "\u{1F637}";
var smile_cat = "\u{1F638}";
var joy_cat = "\u{1F639}";
var smiley_cat = "\u{1F63A}";
var heart_eyes_cat = "\u{1F63B}";
var smirk_cat = "\u{1F63C}";
var kissing_cat = "\u{1F63D}";
var pouting_cat = "\u{1F63E}";
var crying_cat_face = "\u{1F63F}";
var scream_cat = "\u{1F640}";
var slightly_frowning_face = "\u{1F641}";
var slightly_smiling_face = "\u{1F642}";
var upside_down_face = "\u{1F643}";
var face_with_rolling_eyes = "\u{1F644}";
var woman_gesturing_no = "\u{1F645}\u200D\u2640\uFE0F";
var no_good = "\u{1F645}\u200D\u2640\uFE0F";
var man_gesturing_no = "\u{1F645}\u200D\u2642\uFE0F";
var woman_gesturing_ok = "\u{1F646}\u200D\u2640\uFE0F";
var ok_woman = "\u{1F646}\u200D\u2640\uFE0F";
var man_gesturing_ok = "\u{1F646}\u200D\u2642\uFE0F";
var woman_bowing = "\u{1F647}\u200D\u2640\uFE0F";
var man_bowing = "\u{1F647}\u200D\u2642\uFE0F";
var bow = "\u{1F647}\u200D\u2642\uFE0F";
var see_no_evil = "\u{1F648}";
var hear_no_evil = "\u{1F649}";
var speak_no_evil = "\u{1F64A}";
var woman_raising_hand = "\u{1F64B}\u200D\u2640\uFE0F";
var raising_hand = "\u{1F64B}\u200D\u2640\uFE0F";
var man_raising_hand = "\u{1F64B}\u200D\u2642\uFE0F";
var raised_hands = "\u{1F64C}";
var woman_frowning = "\u{1F64D}\u200D\u2640\uFE0F";
var person_frowning = "\u{1F64D}\u200D\u2640\uFE0F";
var man_frowning = "\u{1F64D}\u200D\u2642\uFE0F";
var woman_pouting = "\u{1F64E}\u200D\u2640\uFE0F";
var person_with_pouting_face = "\u{1F64E}\u200D\u2640\uFE0F";
var man_pouting = "\u{1F64E}\u200D\u2642\uFE0F";
var pray = "\u{1F64F}";
var rocket = "\u{1F680}";
var helicopter = "\u{1F681}";
var steam_locomotive = "\u{1F682}";
var railway_car = "\u{1F683}";
var bullettrain_side = "\u{1F684}";
var bullettrain_front = "\u{1F685}";
var train2 = "\u{1F686}";
var metro = "\u{1F687}";
var light_rail = "\u{1F688}";
var station = "\u{1F689}";
var tram = "\u{1F68A}";
var train = "\u{1F68B}";
var bus = "\u{1F68C}";
var oncoming_bus = "\u{1F68D}";
var trolleybus = "\u{1F68E}";
var busstop = "\u{1F68F}";
var minibus = "\u{1F690}";
var ambulance = "\u{1F691}";
var fire_engine = "\u{1F692}";
var police_car = "\u{1F693}";
var oncoming_police_car = "\u{1F694}";
var taxi = "\u{1F695}";
var oncoming_taxi = "\u{1F696}";
var car = "\u{1F697}";
var red_car = "\u{1F697}";
var oncoming_automobile = "\u{1F698}";
var blue_car = "\u{1F699}";
var truck = "\u{1F69A}";
var articulated_lorry = "\u{1F69B}";
var tractor = "\u{1F69C}";
var monorail = "\u{1F69D}";
var mountain_railway = "\u{1F69E}";
var suspension_railway = "\u{1F69F}";
var mountain_cableway = "\u{1F6A0}";
var aerial_tramway = "\u{1F6A1}";
var ship = "\u{1F6A2}";
var woman_rowing_boat = "\u{1F6A3}\u200D\u2640\uFE0F";
var man_rowing_boat = "\u{1F6A3}\u200D\u2642\uFE0F";
var rowboat = "\u{1F6A3}\u200D\u2642\uFE0F";
var speedboat = "\u{1F6A4}";
var traffic_light = "\u{1F6A5}";
var vertical_traffic_light = "\u{1F6A6}";
var construction = "\u{1F6A7}";
var rotating_light = "\u{1F6A8}";
var triangular_flag_on_post = "\u{1F6A9}";
var door = "\u{1F6AA}";
var no_entry_sign = "\u{1F6AB}";
var smoking = "\u{1F6AC}";
var no_smoking = "\u{1F6AD}";
var put_litter_in_its_place = "\u{1F6AE}";
var do_not_litter = "\u{1F6AF}";
var potable_water = "\u{1F6B0}";
var non_potable_water = "\u{1F6B1}";
var bike = "\u{1F6B2}";
var no_bicycles = "\u{1F6B3}";
var woman_biking = "\u{1F6B4}\u200D\u2640\uFE0F";
var man_biking = "\u{1F6B4}\u200D\u2642\uFE0F";
var bicyclist = "\u{1F6B4}\u200D\u2642\uFE0F";
var woman_mountain_biking = "\u{1F6B5}\u200D\u2640\uFE0F";
var man_mountain_biking = "\u{1F6B5}\u200D\u2642\uFE0F";
var mountain_bicyclist = "\u{1F6B5}\u200D\u2642\uFE0F";
var woman_walking = "\u{1F6B6}\u200D\u2640\uFE0F";
var man_walking = "\u{1F6B6}\u200D\u2642\uFE0F";
var walking = "\u{1F6B6}\u200D\u2642\uFE0F";
var no_pedestrians = "\u{1F6B7}";
var children_crossing = "\u{1F6B8}";
var mens = "\u{1F6B9}";
var womens = "\u{1F6BA}";
var restroom = "\u{1F6BB}";
var baby_symbol = "\u{1F6BC}";
var toilet = "\u{1F6BD}";
var wc = "\u{1F6BE}";
var shower = "\u{1F6BF}";
var bath = "\u{1F6C0}";
var bathtub = "\u{1F6C1}";
var passport_control = "\u{1F6C2}";
var customs = "\u{1F6C3}";
var baggage_claim = "\u{1F6C4}";
var left_luggage = "\u{1F6C5}";
var couch_and_lamp = "\u{1F6CB}\uFE0F";
var sleeping_accommodation = "\u{1F6CC}";
var shopping_bags = "\u{1F6CD}\uFE0F";
var bellhop_bell = "\u{1F6CE}\uFE0F";
var bed = "\u{1F6CF}\uFE0F";
var place_of_worship = "\u{1F6D0}";
var octagonal_sign = "\u{1F6D1}";
var shopping_trolley = "\u{1F6D2}";
var hindu_temple = "\u{1F6D5}";
var hut = "\u{1F6D6}";
var elevator = "\u{1F6D7}";
var hammer_and_wrench = "\u{1F6E0}\uFE0F";
var shield = "\u{1F6E1}\uFE0F";
var oil_drum = "\u{1F6E2}\uFE0F";
var motorway = "\u{1F6E3}\uFE0F";
var railway_track = "\u{1F6E4}\uFE0F";
var motor_boat = "\u{1F6E5}\uFE0F";
var small_airplane = "\u{1F6E9}\uFE0F";
var airplane_departure = "\u{1F6EB}";
var airplane_arriving = "\u{1F6EC}";
var satellite = "\u{1F6F0}\uFE0F";
var passenger_ship = "\u{1F6F3}\uFE0F";
var scooter = "\u{1F6F4}";
var motor_scooter = "\u{1F6F5}";
var canoe = "\u{1F6F6}";
var sled = "\u{1F6F7}";
var flying_saucer = "\u{1F6F8}";
var skateboard = "\u{1F6F9}";
var auto_rickshaw = "\u{1F6FA}";
var pickup_truck = "\u{1F6FB}";
var roller_skate = "\u{1F6FC}";
var large_orange_circle = "\u{1F7E0}";
var large_yellow_circle = "\u{1F7E1}";
var large_green_circle = "\u{1F7E2}";
var large_purple_circle = "\u{1F7E3}";
var large_brown_circle = "\u{1F7E4}";
var large_red_square = "\u{1F7E5}";
var large_blue_square = "\u{1F7E6}";
var large_orange_square = "\u{1F7E7}";
var large_yellow_square = "\u{1F7E8}";
var large_green_square = "\u{1F7E9}";
var large_purple_square = "\u{1F7EA}";
var large_brown_square = "\u{1F7EB}";
var pinched_fingers = "\u{1F90C}";
var white_heart = "\u{1F90D}";
var brown_heart = "\u{1F90E}";
var pinching_hand = "\u{1F90F}";
var zipper_mouth_face = "\u{1F910}";
var money_mouth_face = "\u{1F911}";
var face_with_thermometer = "\u{1F912}";
var nerd_face = "\u{1F913}";
var thinking_face = "\u{1F914}";
var face_with_head_bandage = "\u{1F915}";
var robot_face = "\u{1F916}";
var hugging_face = "\u{1F917}";
var the_horns = "\u{1F918}";
var sign_of_the_horns = "\u{1F918}";
var call_me_hand = "\u{1F919}";
var raised_back_of_hand = "\u{1F91A}";
var left_facing_fist = "\u{1F91B}";
var right_facing_fist = "\u{1F91C}";
var handshake = "\u{1F91D}";
var crossed_fingers = "\u{1F91E}";
var hand_with_index_and_middle_fingers_crossed = "\u{1F91E}";
var i_love_you_hand_sign = "\u{1F91F}";
var face_with_cowboy_hat = "\u{1F920}";
var clown_face = "\u{1F921}";
var nauseated_face = "\u{1F922}";
var rolling_on_the_floor_laughing = "\u{1F923}";
var drooling_face = "\u{1F924}";
var lying_face = "\u{1F925}";
var woman_facepalming = "\u{1F926}\u200D\u2640\uFE0F";
var man_facepalming = "\u{1F926}\u200D\u2642\uFE0F";
var face_palm = "\u{1F926}";
var sneezing_face = "\u{1F927}";
var face_with_raised_eyebrow = "\u{1F928}";
var face_with_one_eyebrow_raised = "\u{1F928}";
var star_struck = "\u{1F929}";
var grinning_face_with_star_eyes = "\u{1F929}";
var zany_face = "\u{1F92A}";
var grinning_face_with_one_large_and_one_small_eye = "\u{1F92A}";
var shushing_face = "\u{1F92B}";
var face_with_finger_covering_closed_lips = "\u{1F92B}";
var face_with_symbols_on_mouth = "\u{1F92C}";
var serious_face_with_symbols_covering_mouth = "\u{1F92C}";
var face_with_hand_over_mouth = "\u{1F92D}";
var smiling_face_with_smiling_eyes_and_hand_covering_mouth = "\u{1F92D}";
var face_vomiting = "\u{1F92E}";
var face_with_open_mouth_vomiting = "\u{1F92E}";
var exploding_head = "\u{1F92F}";
var shocked_face_with_exploding_head = "\u{1F92F}";
var pregnant_woman = "\u{1F930}";
var breast_feeding = "\u{1F931}";
var palms_up_together = "\u{1F932}";
var selfie = "\u{1F933}";
var prince = "\u{1F934}";
var woman_in_tuxedo = "\u{1F935}\u200D\u2640\uFE0F";
var man_in_tuxedo = "\u{1F935}\u200D\u2642\uFE0F";
var person_in_tuxedo = "\u{1F935}";
var mrs_claus = "\u{1F936}";
var mother_christmas = "\u{1F936}";
var woman_shrugging = "\u{1F937}\u200D\u2640\uFE0F";
var man_shrugging = "\u{1F937}\u200D\u2642\uFE0F";
var shrug = "\u{1F937}";
var woman_cartwheeling = "\u{1F938}\u200D\u2640\uFE0F";
var man_cartwheeling = "\u{1F938}\u200D\u2642\uFE0F";
var person_doing_cartwheel = "\u{1F938}";
var woman_juggling = "\u{1F939}\u200D\u2640\uFE0F";
var man_juggling = "\u{1F939}\u200D\u2642\uFE0F";
var juggling = "\u{1F939}";
var fencer = "\u{1F93A}";
var woman_wrestling = "\u{1F93C}\u200D\u2640\uFE0F";
var man_wrestling = "\u{1F93C}\u200D\u2642\uFE0F";
var wrestlers = "\u{1F93C}";
var woman_playing_water_polo = "\u{1F93D}\u200D\u2640\uFE0F";
var man_playing_water_polo = "\u{1F93D}\u200D\u2642\uFE0F";
var water_polo = "\u{1F93D}";
var woman_playing_handball = "\u{1F93E}\u200D\u2640\uFE0F";
var man_playing_handball = "\u{1F93E}\u200D\u2642\uFE0F";
var handball = "\u{1F93E}";
var diving_mask = "\u{1F93F}";
var wilted_flower = "\u{1F940}";
var drum_with_drumsticks = "\u{1F941}";
var clinking_glasses = "\u{1F942}";
var tumbler_glass = "\u{1F943}";
var spoon = "\u{1F944}";
var goal_net = "\u{1F945}";
var first_place_medal = "\u{1F947}";
var second_place_medal = "\u{1F948}";
var third_place_medal = "\u{1F949}";
var boxing_glove = "\u{1F94A}";
var martial_arts_uniform = "\u{1F94B}";
var curling_stone = "\u{1F94C}";
var lacrosse = "\u{1F94D}";
var softball = "\u{1F94E}";
var flying_disc = "\u{1F94F}";
var croissant = "\u{1F950}";
var avocado = "\u{1F951}";
var cucumber = "\u{1F952}";
var bacon = "\u{1F953}";
var potato = "\u{1F954}";
var carrot = "\u{1F955}";
var baguette_bread = "\u{1F956}";
var green_salad = "\u{1F957}";
var shallow_pan_of_food = "\u{1F958}";
var stuffed_flatbread = "\u{1F959}";
var egg = "\u{1F95A}";
var glass_of_milk = "\u{1F95B}";
var peanuts = "\u{1F95C}";
var kiwifruit = "\u{1F95D}";
var pancakes = "\u{1F95E}";
var dumpling = "\u{1F95F}";
var fortune_cookie = "\u{1F960}";
var takeout_box = "\u{1F961}";
var chopsticks = "\u{1F962}";
var bowl_with_spoon = "\u{1F963}";
var cup_with_straw = "\u{1F964}";
var coconut = "\u{1F965}";
var broccoli = "\u{1F966}";
var pie = "\u{1F967}";
var pretzel = "\u{1F968}";
var cut_of_meat = "\u{1F969}";
var sandwich = "\u{1F96A}";
var canned_food = "\u{1F96B}";
var leafy_green = "\u{1F96C}";
var mango = "\u{1F96D}";
var moon_cake = "\u{1F96E}";
var bagel = "\u{1F96F}";
var smiling_face_with_3_hearts = "\u{1F970}";
var yawning_face = "\u{1F971}";
var smiling_face_with_tear = "\u{1F972}";
var partying_face = "\u{1F973}";
var woozy_face = "\u{1F974}";
var hot_face = "\u{1F975}";
var cold_face = "\u{1F976}";
var ninja = "\u{1F977}";
var disguised_face = "\u{1F978}";
var pleading_face = "\u{1F97A}";
var sari = "\u{1F97B}";
var lab_coat = "\u{1F97C}";
var goggles = "\u{1F97D}";
var hiking_boot = "\u{1F97E}";
var womans_flat_shoe = "\u{1F97F}";
var crab = "\u{1F980}";
var lion_face = "\u{1F981}";
var scorpion = "\u{1F982}";
var turkey = "\u{1F983}";
var unicorn_face = "\u{1F984}";
var eagle = "\u{1F985}";
var duck = "\u{1F986}";
var bat = "\u{1F987}";
var shark = "\u{1F988}";
var owl = "\u{1F989}";
var fox_face = "\u{1F98A}";
var butterfly = "\u{1F98B}";
var deer = "\u{1F98C}";
var gorilla = "\u{1F98D}";
var lizard = "\u{1F98E}";
var rhinoceros = "\u{1F98F}";
var shrimp = "\u{1F990}";
var squid = "\u{1F991}";
var giraffe_face = "\u{1F992}";
var zebra_face = "\u{1F993}";
var hedgehog = "\u{1F994}";
var sauropod = "\u{1F995}";
var t_rex = "\u{1F996}";
var cricket = "\u{1F997}";
var kangaroo = "\u{1F998}";
var llama = "\u{1F999}";
var peacock = "\u{1F99A}";
var hippopotamus = "\u{1F99B}";
var parrot = "\u{1F99C}";
var raccoon = "\u{1F99D}";
var lobster = "\u{1F99E}";
var mosquito = "\u{1F99F}";
var microbe = "\u{1F9A0}";
var badger = "\u{1F9A1}";
var swan = "\u{1F9A2}";
var mammoth = "\u{1F9A3}";
var dodo = "\u{1F9A4}";
var sloth = "\u{1F9A5}";
var otter = "\u{1F9A6}";
var orangutan = "\u{1F9A7}";
var skunk = "\u{1F9A8}";
var flamingo = "\u{1F9A9}";
var oyster = "\u{1F9AA}";
var beaver = "\u{1F9AB}";
var bison = "\u{1F9AC}";
var seal = "\u{1F9AD}";
var guide_dog = "\u{1F9AE}";
var probing_cane = "\u{1F9AF}";
var bone = "\u{1F9B4}";
var leg = "\u{1F9B5}";
var foot = "\u{1F9B6}";
var tooth = "\u{1F9B7}";
var female_superhero = "\u{1F9B8}\u200D\u2640\uFE0F";
var male_superhero = "\u{1F9B8}\u200D\u2642\uFE0F";
var superhero = "\u{1F9B8}";
var female_supervillain = "\u{1F9B9}\u200D\u2640\uFE0F";
var male_supervillain = "\u{1F9B9}\u200D\u2642\uFE0F";
var supervillain = "\u{1F9B9}";
var safety_vest = "\u{1F9BA}";
var ear_with_hearing_aid = "\u{1F9BB}";
var motorized_wheelchair = "\u{1F9BC}";
var manual_wheelchair = "\u{1F9BD}";
var mechanical_arm = "\u{1F9BE}";
var mechanical_leg = "\u{1F9BF}";
var cheese_wedge = "\u{1F9C0}";
var cupcake = "\u{1F9C1}";
var salt = "\u{1F9C2}";
var beverage_box = "\u{1F9C3}";
var garlic = "\u{1F9C4}";
var onion = "\u{1F9C5}";
var falafel = "\u{1F9C6}";
var waffle = "\u{1F9C7}";
var butter = "\u{1F9C8}";
var mate_drink = "\u{1F9C9}";
var ice_cube = "\u{1F9CA}";
var bubble_tea = "\u{1F9CB}";
var woman_standing = "\u{1F9CD}\u200D\u2640\uFE0F";
var man_standing = "\u{1F9CD}\u200D\u2642\uFE0F";
var standing_person = "\u{1F9CD}";
var woman_kneeling = "\u{1F9CE}\u200D\u2640\uFE0F";
var man_kneeling = "\u{1F9CE}\u200D\u2642\uFE0F";
var kneeling_person = "\u{1F9CE}";
var deaf_woman = "\u{1F9CF}\u200D\u2640\uFE0F";
var deaf_man = "\u{1F9CF}\u200D\u2642\uFE0F";
var deaf_person = "\u{1F9CF}";
var face_with_monocle = "\u{1F9D0}";
var farmer = "\u{1F9D1}\u200D\u{1F33E}";
var cook = "\u{1F9D1}\u200D\u{1F373}";
var person_feeding_baby = "\u{1F9D1}\u200D\u{1F37C}";
var mx_claus = "\u{1F9D1}\u200D\u{1F384}";
var student = "\u{1F9D1}\u200D\u{1F393}";
var singer = "\u{1F9D1}\u200D\u{1F3A4}";
var artist = "\u{1F9D1}\u200D\u{1F3A8}";
var teacher = "\u{1F9D1}\u200D\u{1F3EB}";
var factory_worker = "\u{1F9D1}\u200D\u{1F3ED}";
var technologist = "\u{1F9D1}\u200D\u{1F4BB}";
var office_worker = "\u{1F9D1}\u200D\u{1F4BC}";
var mechanic = "\u{1F9D1}\u200D\u{1F527}";
var scientist = "\u{1F9D1}\u200D\u{1F52C}";
var astronaut = "\u{1F9D1}\u200D\u{1F680}";
var firefighter = "\u{1F9D1}\u200D\u{1F692}";
var people_holding_hands = "\u{1F9D1}\u200D\u{1F91D}\u200D\u{1F9D1}";
var person_with_probing_cane = "\u{1F9D1}\u200D\u{1F9AF}";
var red_haired_person = "\u{1F9D1}\u200D\u{1F9B0}";
var curly_haired_person = "\u{1F9D1}\u200D\u{1F9B1}";
var bald_person = "\u{1F9D1}\u200D\u{1F9B2}";
var white_haired_person = "\u{1F9D1}\u200D\u{1F9B3}";
var person_in_motorized_wheelchair = "\u{1F9D1}\u200D\u{1F9BC}";
var person_in_manual_wheelchair = "\u{1F9D1}\u200D\u{1F9BD}";
var health_worker = "\u{1F9D1}\u200D\u2695\uFE0F";
var judge = "\u{1F9D1}\u200D\u2696\uFE0F";
var pilot = "\u{1F9D1}\u200D\u2708\uFE0F";
var adult = "\u{1F9D1}";
var child = "\u{1F9D2}";
var older_adult = "\u{1F9D3}";
var woman_with_beard = "\u{1F9D4}\u200D\u2640\uFE0F";
var man_with_beard = "\u{1F9D4}\u200D\u2642\uFE0F";
var bearded_person = "\u{1F9D4}";
var person_with_headscarf = "\u{1F9D5}";
var woman_in_steamy_room = "\u{1F9D6}\u200D\u2640\uFE0F";
var man_in_steamy_room = "\u{1F9D6}\u200D\u2642\uFE0F";
var person_in_steamy_room = "\u{1F9D6}\u200D\u2642\uFE0F";
var woman_climbing = "\u{1F9D7}\u200D\u2640\uFE0F";
var person_climbing = "\u{1F9D7}\u200D\u2640\uFE0F";
var man_climbing = "\u{1F9D7}\u200D\u2642\uFE0F";
var woman_in_lotus_position = "\u{1F9D8}\u200D\u2640\uFE0F";
var person_in_lotus_position = "\u{1F9D8}\u200D\u2640\uFE0F";
var man_in_lotus_position = "\u{1F9D8}\u200D\u2642\uFE0F";
var female_mage = "\u{1F9D9}\u200D\u2640\uFE0F";
var mage = "\u{1F9D9}\u200D\u2640\uFE0F";
var male_mage = "\u{1F9D9}\u200D\u2642\uFE0F";
var female_fairy = "\u{1F9DA}\u200D\u2640\uFE0F";
var fairy = "\u{1F9DA}\u200D\u2640\uFE0F";
var male_fairy = "\u{1F9DA}\u200D\u2642\uFE0F";
var female_vampire = "\u{1F9DB}\u200D\u2640\uFE0F";
var vampire = "\u{1F9DB}\u200D\u2640\uFE0F";
var male_vampire = "\u{1F9DB}\u200D\u2642\uFE0F";
var mermaid = "\u{1F9DC}\u200D\u2640\uFE0F";
var merman = "\u{1F9DC}\u200D\u2642\uFE0F";
var merperson = "\u{1F9DC}\u200D\u2642\uFE0F";
var female_elf = "\u{1F9DD}\u200D\u2640\uFE0F";
var male_elf = "\u{1F9DD}\u200D\u2642\uFE0F";
var elf = "\u{1F9DD}\u200D\u2642\uFE0F";
var female_genie = "\u{1F9DE}\u200D\u2640\uFE0F";
var male_genie = "\u{1F9DE}\u200D\u2642\uFE0F";
var genie = "\u{1F9DE}\u200D\u2642\uFE0F";
var female_zombie = "\u{1F9DF}\u200D\u2640\uFE0F";
var male_zombie = "\u{1F9DF}\u200D\u2642\uFE0F";
var zombie = "\u{1F9DF}\u200D\u2642\uFE0F";
var brain = "\u{1F9E0}";
var orange_heart = "\u{1F9E1}";
var billed_cap = "\u{1F9E2}";
var scarf = "\u{1F9E3}";
var gloves = "\u{1F9E4}";
var coat = "\u{1F9E5}";
var socks = "\u{1F9E6}";
var red_envelope = "\u{1F9E7}";
var firecracker = "\u{1F9E8}";
var jigsaw = "\u{1F9E9}";
var test_tube = "\u{1F9EA}";
var petri_dish = "\u{1F9EB}";
var dna = "\u{1F9EC}";
var compass = "\u{1F9ED}";
var abacus = "\u{1F9EE}";
var fire_extinguisher = "\u{1F9EF}";
var toolbox = "\u{1F9F0}";
var bricks = "\u{1F9F1}";
var magnet = "\u{1F9F2}";
var luggage = "\u{1F9F3}";
var lotion_bottle = "\u{1F9F4}";
var thread = "\u{1F9F5}";
var yarn = "\u{1F9F6}";
var safety_pin = "\u{1F9F7}";
var teddy_bear = "\u{1F9F8}";
var broom = "\u{1F9F9}";
var basket = "\u{1F9FA}";
var roll_of_paper = "\u{1F9FB}";
var soap = "\u{1F9FC}";
var sponge = "\u{1F9FD}";
var receipt = "\u{1F9FE}";
var nazar_amulet = "\u{1F9FF}";
var ballet_shoes = "\u{1FA70}";
var one_piece_swimsuit = "\u{1FA71}";
var briefs = "\u{1FA72}";
var shorts = "\u{1FA73}";
var thong_sandal = "\u{1FA74}";
var drop_of_blood = "\u{1FA78}";
var adhesive_bandage = "\u{1FA79}";
var stethoscope = "\u{1FA7A}";
var yo_yo = "\u{1FA80}";
var kite = "\u{1FA81}";
var parachute = "\u{1FA82}";
var boomerang = "\u{1FA83}";
var magic_wand = "\u{1FA84}";
var pinata = "\u{1FA85}";
var nesting_dolls = "\u{1FA86}";
var ringed_planet = "\u{1FA90}";
var chair = "\u{1FA91}";
var razor = "\u{1FA92}";
var axe = "\u{1FA93}";
var diya_lamp = "\u{1FA94}";
var banjo = "\u{1FA95}";
var military_helmet = "\u{1FA96}";
var accordion = "\u{1FA97}";
var long_drum = "\u{1FA98}";
var coin = "\u{1FA99}";
var carpentry_saw = "\u{1FA9A}";
var screwdriver = "\u{1FA9B}";
var ladder = "\u{1FA9C}";
var hook = "\u{1FA9D}";
var mirror = "\u{1FA9E}";
var window2 = "\u{1FA9F}";
var plunger = "\u{1FAA0}";
var sewing_needle = "\u{1FAA1}";
var knot = "\u{1FAA2}";
var bucket = "\u{1FAA3}";
var mouse_trap = "\u{1FAA4}";
var toothbrush = "\u{1FAA5}";
var headstone = "\u{1FAA6}";
var placard = "\u{1FAA7}";
var rock = "\u{1FAA8}";
var fly = "\u{1FAB0}";
var worm = "\u{1FAB1}";
var beetle = "\u{1FAB2}";
var cockroach = "\u{1FAB3}";
var potted_plant = "\u{1FAB4}";
var wood = "\u{1FAB5}";
var feather = "\u{1FAB6}";
var anatomical_heart = "\u{1FAC0}";
var lungs = "\u{1FAC1}";
var people_hugging = "\u{1FAC2}";
var blueberries = "\u{1FAD0}";
var bell_pepper = "\u{1FAD1}";
var olive = "\u{1FAD2}";
var flatbread = "\u{1FAD3}";
var tamale = "\u{1FAD4}";
var fondue = "\u{1FAD5}";
var teapot = "\u{1FAD6}";
var bangbang = "\u203C\uFE0F";
var interrobang = "\u2049\uFE0F";
var tm = "\u2122\uFE0F";
var information_source = "\u2139\uFE0F";
var left_right_arrow = "\u2194\uFE0F";
var arrow_up_down = "\u2195\uFE0F";
var arrow_upper_left = "\u2196\uFE0F";
var arrow_upper_right = "\u2197\uFE0F";
var arrow_lower_right = "\u2198\uFE0F";
var arrow_lower_left = "\u2199\uFE0F";
var leftwards_arrow_with_hook = "\u21A9\uFE0F";
var arrow_right_hook = "\u21AA\uFE0F";
var watch = "\u231A";
var hourglass = "\u231B";
var keyboard = "\u2328\uFE0F";
var eject = "\u23CF\uFE0F";
var fast_forward = "\u23E9";
var rewind = "\u23EA";
var arrow_double_up = "\u23EB";
var arrow_double_down = "\u23EC";
var black_right_pointing_double_triangle_with_vertical_bar = "\u23ED\uFE0F";
var black_left_pointing_double_triangle_with_vertical_bar = "\u23EE\uFE0F";
var black_right_pointing_triangle_with_double_vertical_bar = "\u23EF\uFE0F";
var alarm_clock = "\u23F0";
var stopwatch = "\u23F1\uFE0F";
var timer_clock = "\u23F2\uFE0F";
var hourglass_flowing_sand = "\u23F3";
var double_vertical_bar = "\u23F8\uFE0F";
var black_square_for_stop = "\u23F9\uFE0F";
var black_circle_for_record = "\u23FA\uFE0F";
var m = "\u24C2\uFE0F";
var black_small_square = "\u25AA\uFE0F";
var white_small_square = "\u25AB\uFE0F";
var arrow_forward = "\u25B6\uFE0F";
var arrow_backward = "\u25C0\uFE0F";
var white_medium_square = "\u25FB\uFE0F";
var black_medium_square = "\u25FC\uFE0F";
var white_medium_small_square = "\u25FD";
var black_medium_small_square = "\u25FE";
var sunny = "\u2600\uFE0F";
var cloud = "\u2601\uFE0F";
var umbrella = "\u2602\uFE0F";
var snowman = "\u2603\uFE0F";
var comet = "\u2604\uFE0F";
var phone = "\u260E\uFE0F";
var telephone = "\u260E\uFE0F";
var ballot_box_with_check = "\u2611\uFE0F";
var shamrock = "\u2618\uFE0F";
var point_up = "\u261D\uFE0F";
var skull_and_crossbones = "\u2620\uFE0F";
var radioactive_sign = "\u2622\uFE0F";
var biohazard_sign = "\u2623\uFE0F";
var orthodox_cross = "\u2626\uFE0F";
var star_and_crescent = "\u262A\uFE0F";
var peace_symbol = "\u262E\uFE0F";
var yin_yang = "\u262F\uFE0F";
var wheel_of_dharma = "\u2638\uFE0F";
var white_frowning_face = "\u2639\uFE0F";
var relaxed = "\u263A\uFE0F";
var female_sign = "\u2640\uFE0F";
var male_sign = "\u2642\uFE0F";
var gemini = "\u264A";
var cancer = "\u264B";
var leo = "\u264C";
var virgo = "\u264D";
var libra = "\u264E";
var scorpius = "\u264F";
var chess_pawn = "\u265F\uFE0F";
var spades = "\u2660\uFE0F";
var clubs = "\u2663\uFE0F";
var hearts = "\u2665\uFE0F";
var diamonds = "\u2666\uFE0F";
var hotsprings = "\u2668\uFE0F";
var recycle = "\u267B\uFE0F";
var infinity = "\u267E\uFE0F";
var wheelchair = "\u267F";
var hammer_and_pick = "\u2692\uFE0F";
var crossed_swords = "\u2694\uFE0F";
var medical_symbol = "\u2695\uFE0F";
var staff_of_aesculapius = "\u2695\uFE0F";
var scales = "\u2696\uFE0F";
var alembic = "\u2697\uFE0F";
var gear = "\u2699\uFE0F";
var atom_symbol = "\u269B\uFE0F";
var fleur_de_lis = "\u269C\uFE0F";
var warning = "\u26A0\uFE0F";
var zap = "\u26A1";
var transgender_symbol = "\u26A7\uFE0F";
var white_circle = "\u26AA";
var black_circle = "\u26AB";
var coffin = "\u26B0\uFE0F";
var funeral_urn = "\u26B1\uFE0F";
var soccer = "\u26BD";
var baseball = "\u26BE";
var snowman_without_snow = "\u26C4";
var partly_sunny = "\u26C5";
var thunder_cloud_and_rain = "\u26C8\uFE0F";
var ophiuchus = "\u26CE";
var pick = "\u26CF\uFE0F";
var helmet_with_white_cross = "\u26D1\uFE0F";
var chains = "\u26D3\uFE0F";
var no_entry = "\u26D4";
var shinto_shrine = "\u26E9\uFE0F";
var church = "\u26EA";
var mountain = "\u26F0\uFE0F";
var umbrella_on_ground = "\u26F1\uFE0F";
var fountain = "\u26F2";
var golf = "\u26F3";
var ferry = "\u26F4\uFE0F";
var boat = "\u26F5";
var sailboat = "\u26F5";
var skier = "\u26F7\uFE0F";
var ice_skate = "\u26F8\uFE0F";
var woman_bouncing_ball = "\u26F9\uFE0F\u200D\u2640\uFE0F";
var man_bouncing_ball = "\u26F9\uFE0F\u200D\u2642\uFE0F";
var person_with_ball = "\u26F9\uFE0F\u200D\u2642\uFE0F";
var tent = "\u26FA";
var fuelpump = "\u26FD";
var scissors = "\u2702\uFE0F";
var airplane = "\u2708\uFE0F";
var email = "\u2709\uFE0F";
var envelope = "\u2709\uFE0F";
var fist = "\u270A";
var hand = "\u270B";
var raised_hand = "\u270B";
var v = "\u270C\uFE0F";
var writing_hand = "\u270D\uFE0F";
var pencil2 = "\u270F\uFE0F";
var black_nib = "\u2712\uFE0F";
var heavy_check_mark = "\u2714\uFE0F";
var heavy_multiplication_x = "\u2716\uFE0F";
var latin_cross = "\u271D\uFE0F";
var star_of_david = "\u2721\uFE0F";
var eight_spoked_asterisk = "\u2733\uFE0F";
var eight_pointed_black_star = "\u2734\uFE0F";
var snowflake = "\u2744\uFE0F";
var sparkle = "\u2747\uFE0F";
var x = "\u274C";
var negative_squared_cross_mark = "\u274E";
var heavy_heart_exclamation_mark_ornament = "\u2763\uFE0F";
var heart_on_fire = "\u2764\uFE0F\u200D\u{1F525}";
var mending_heart = "\u2764\uFE0F\u200D\u{1FA79}";
var heart = "\u2764\uFE0F";
var arrow_right = "\u27A1\uFE0F";
var curly_loop = "\u27B0";
var loop = "\u27BF";
var arrow_heading_up = "\u2934\uFE0F";
var arrow_heading_down = "\u2935\uFE0F";
var arrow_left = "\u2B05\uFE0F";
var arrow_up = "\u2B06\uFE0F";
var arrow_down = "\u2B07\uFE0F";
var black_large_square = "\u2B1B";
var white_large_square = "\u2B1C";
var star = "\u2B50";
var o = "\u2B55";
var wavy_dash = "\u3030\uFE0F";
var part_alternation_mark = "\u303D\uFE0F";
var congratulations = "\u3297\uFE0F";
var secret = "\u3299\uFE0F";
var emoji_default = { "100": _00, "1234": _234, umbrella_with_rain_drops, coffee, aries, taurus, sagittarius, capricorn, aquarius, pisces, anchor, white_check_mark, sparkles, question, grey_question, grey_exclamation, exclamation, heavy_exclamation_mark, heavy_plus_sign, heavy_minus_sign, heavy_division_sign, hash, keycap_star, zero, one, two, three, four, five, six, seven, eight, nine, copyright, registered, mahjong, black_joker, a, b, o2, parking, ab, cl, cool, free, id, new: new2, ng, ok, sos, up, vs, "flag-ac": flag_ac, "flag-ad": flag_ad, "flag-ae": flag_ae, "flag-af": flag_af, "flag-ag": flag_ag, "flag-ai": flag_ai, "flag-al": flag_al, "flag-am": flag_am, "flag-ao": flag_ao, "flag-aq": flag_aq, "flag-ar": flag_ar, "flag-as": flag_as, "flag-at": flag_at, "flag-au": flag_au, "flag-aw": flag_aw, "flag-ax": flag_ax, "flag-az": flag_az, "flag-ba": flag_ba, "flag-bb": flag_bb, "flag-bd": flag_bd, "flag-be": flag_be, "flag-bf": flag_bf, "flag-bg": flag_bg, "flag-bh": flag_bh, "flag-bi": flag_bi, "flag-bj": flag_bj, "flag-bl": flag_bl, "flag-bm": flag_bm, "flag-bn": flag_bn, "flag-bo": flag_bo, "flag-bq": flag_bq, "flag-br": flag_br, "flag-bs": flag_bs, "flag-bt": flag_bt, "flag-bv": flag_bv, "flag-bw": flag_bw, "flag-by": flag_by, "flag-bz": flag_bz, "flag-ca": flag_ca, "flag-cc": flag_cc, "flag-cd": flag_cd, "flag-cf": flag_cf, "flag-cg": flag_cg, "flag-ch": flag_ch, "flag-ci": flag_ci, "flag-ck": flag_ck, "flag-cl": flag_cl, "flag-cm": flag_cm, cn, "flag-cn": flag_cn, "flag-co": flag_co, "flag-cp": flag_cp, "flag-cr": flag_cr, "flag-cu": flag_cu, "flag-cv": flag_cv, "flag-cw": flag_cw, "flag-cx": flag_cx, "flag-cy": flag_cy, "flag-cz": flag_cz, de, "flag-de": flag_de, "flag-dg": flag_dg, "flag-dj": flag_dj, "flag-dk": flag_dk, "flag-dm": flag_dm, "flag-do": flag_do, "flag-dz": flag_dz, "flag-ea": flag_ea, "flag-ec": flag_ec, "flag-ee": flag_ee, "flag-eg": flag_eg, "flag-eh": flag_eh, "flag-er": flag_er, es, "flag-es": flag_es, "flag-et": flag_et, "flag-eu": flag_eu, "flag-fi": flag_fi, "flag-fj": flag_fj, "flag-fk": flag_fk, "flag-fm": flag_fm, "flag-fo": flag_fo, fr, "flag-fr": flag_fr, "flag-ga": flag_ga, gb, uk, "flag-gb": flag_gb, "flag-gd": flag_gd, "flag-ge": flag_ge, "flag-gf": flag_gf, "flag-gg": flag_gg, "flag-gh": flag_gh, "flag-gi": flag_gi, "flag-gl": flag_gl, "flag-gm": flag_gm, "flag-gn": flag_gn, "flag-gp": flag_gp, "flag-gq": flag_gq, "flag-gr": flag_gr, "flag-gs": flag_gs, "flag-gt": flag_gt, "flag-gu": flag_gu, "flag-gw": flag_gw, "flag-gy": flag_gy, "flag-hk": flag_hk, "flag-hm": flag_hm, "flag-hn": flag_hn, "flag-hr": flag_hr, "flag-ht": flag_ht, "flag-hu": flag_hu, "flag-ic": flag_ic, "flag-id": flag_id, "flag-ie": flag_ie, "flag-il": flag_il, "flag-im": flag_im, "flag-in": flag_in, "flag-io": flag_io, "flag-iq": flag_iq, "flag-ir": flag_ir, "flag-is": flag_is, it, "flag-it": flag_it, "flag-je": flag_je, "flag-jm": flag_jm, "flag-jo": flag_jo, jp, "flag-jp": flag_jp, "flag-ke": flag_ke, "flag-kg": flag_kg, "flag-kh": flag_kh, "flag-ki": flag_ki, "flag-km": flag_km, "flag-kn": flag_kn, "flag-kp": flag_kp, kr, "flag-kr": flag_kr, "flag-kw": flag_kw, "flag-ky": flag_ky, "flag-kz": flag_kz, "flag-la": flag_la, "flag-lb": flag_lb, "flag-lc": flag_lc, "flag-li": flag_li, "flag-lk": flag_lk, "flag-lr": flag_lr, "flag-ls": flag_ls, "flag-lt": flag_lt, "flag-lu": flag_lu, "flag-lv": flag_lv, "flag-ly": flag_ly, "flag-ma": flag_ma, "flag-mc": flag_mc, "flag-md": flag_md, "flag-me": flag_me, "flag-mf": flag_mf, "flag-mg": flag_mg, "flag-mh": flag_mh, "flag-mk": flag_mk, "flag-ml": flag_ml, "flag-mm": flag_mm, "flag-mn": flag_mn, "flag-mo": flag_mo, "flag-mp": flag_mp, "flag-mq": flag_mq, "flag-mr": flag_mr, "flag-ms": flag_ms, "flag-mt": flag_mt, "flag-mu": flag_mu, "flag-mv": flag_mv, "flag-mw": flag_mw, "flag-mx": flag_mx, "flag-my": flag_my, "flag-mz": flag_mz, "flag-na": flag_na, "flag-nc": flag_nc, "flag-ne": flag_ne, "flag-nf": flag_nf, "flag-ng": flag_ng, "flag-ni": flag_ni, "flag-nl": flag_nl, "flag-no": flag_no, "flag-np": flag_np, "flag-nr": flag_nr, "flag-nu": flag_nu, "flag-nz": flag_nz, "flag-om": flag_om, "flag-pa": flag_pa, "flag-pe": flag_pe, "flag-pf": flag_pf, "flag-pg": flag_pg, "flag-ph": flag_ph, "flag-pk": flag_pk, "flag-pl": flag_pl, "flag-pm": flag_pm, "flag-pn": flag_pn, "flag-pr": flag_pr, "flag-ps": flag_ps, "flag-pt": flag_pt, "flag-pw": flag_pw, "flag-py": flag_py, "flag-qa": flag_qa, "flag-re": flag_re, "flag-ro": flag_ro, "flag-rs": flag_rs, ru, "flag-ru": flag_ru, "flag-rw": flag_rw, "flag-sa": flag_sa, "flag-sb": flag_sb, "flag-sc": flag_sc, "flag-sd": flag_sd, "flag-se": flag_se, "flag-sg": flag_sg, "flag-sh": flag_sh, "flag-si": flag_si, "flag-sj": flag_sj, "flag-sk": flag_sk, "flag-sl": flag_sl, "flag-sm": flag_sm, "flag-sn": flag_sn, "flag-so": flag_so, "flag-sr": flag_sr, "flag-ss": flag_ss, "flag-st": flag_st, "flag-sv": flag_sv, "flag-sx": flag_sx, "flag-sy": flag_sy, "flag-sz": flag_sz, "flag-ta": flag_ta, "flag-tc": flag_tc, "flag-td": flag_td, "flag-tf": flag_tf, "flag-tg": flag_tg, "flag-th": flag_th, "flag-tj": flag_tj, "flag-tk": flag_tk, "flag-tl": flag_tl, "flag-tm": flag_tm, "flag-tn": flag_tn, "flag-to": flag_to, "flag-tr": flag_tr, "flag-tt": flag_tt, "flag-tv": flag_tv, "flag-tw": flag_tw, "flag-tz": flag_tz, "flag-ua": flag_ua, "flag-ug": flag_ug, "flag-um": flag_um, "flag-un": flag_un, us, "flag-us": flag_us, "flag-uy": flag_uy, "flag-uz": flag_uz, "flag-va": flag_va, "flag-vc": flag_vc, "flag-ve": flag_ve, "flag-vg": flag_vg, "flag-vi": flag_vi, "flag-vn": flag_vn, "flag-vu": flag_vu, "flag-wf": flag_wf, "flag-ws": flag_ws, "flag-xk": flag_xk, "flag-ye": flag_ye, "flag-yt": flag_yt, "flag-za": flag_za, "flag-zm": flag_zm, "flag-zw": flag_zw, koko, sa, u7121, u6307, u7981, u7a7a, u5408, u6e80, u6709, u6708, u7533, u5272, u55b6, ideograph_advantage, accept, cyclone, foggy, closed_umbrella, night_with_stars, sunrise_over_mountains, sunrise, city_sunset, city_sunrise, rainbow, bridge_at_night, ocean, volcano, milky_way, earth_africa, earth_americas, earth_asia, globe_with_meridians, new_moon, waxing_crescent_moon, first_quarter_moon, moon, waxing_gibbous_moon, full_moon, waning_gibbous_moon, last_quarter_moon, waning_crescent_moon, crescent_moon, new_moon_with_face, first_quarter_moon_with_face, last_quarter_moon_with_face, full_moon_with_face, sun_with_face, star2, stars, thermometer, mostly_sunny, sun_small_cloud, barely_sunny, sun_behind_cloud, partly_sunny_rain, sun_behind_rain_cloud, rain_cloud, snow_cloud, lightning, lightning_cloud, tornado, tornado_cloud, fog, wind_blowing_face, hotdog, taco, burrito, chestnut, seedling, evergreen_tree, deciduous_tree, palm_tree, cactus, hot_pepper, tulip, cherry_blossom, rose, hibiscus, sunflower, blossom, corn, ear_of_rice, herb, four_leaf_clover, maple_leaf, fallen_leaf, leaves, mushroom, tomato, eggplant, grapes, melon, watermelon, tangerine, lemon, banana, pineapple, apple, green_apple, pear, peach, cherries, strawberry, hamburger, pizza, meat_on_bone, poultry_leg, rice_cracker, rice_ball, rice, curry, ramen, spaghetti, bread, fries, sweet_potato, dango, oden, sushi, fried_shrimp, fish_cake, icecream, shaved_ice, ice_cream, doughnut, cookie, chocolate_bar, candy, lollipop, custard, honey_pot, cake, bento, stew, fried_egg, cooking, fork_and_knife, tea, sake, wine_glass, cocktail, tropical_drink, beer, beers, baby_bottle, knife_fork_plate, champagne, popcorn, ribbon, gift, birthday, jack_o_lantern, christmas_tree, santa, fireworks, sparkler, balloon, tada, confetti_ball, tanabata_tree, crossed_flags, bamboo, dolls, flags, wind_chime, rice_scene, school_satchel, mortar_board, medal, reminder_ribbon, studio_microphone, level_slider, control_knobs, film_frames, admission_tickets, carousel_horse, ferris_wheel, roller_coaster, fishing_pole_and_fish, microphone, movie_camera, cinema, headphones, art, tophat, circus_tent, ticket, clapper, performing_arts, video_game, dart, slot_machine, "8ball": _ball, game_die, bowling, flower_playing_cards, musical_note, notes, saxophone, guitar, musical_keyboard, trumpet, violin, musical_score, running_shirt_with_sash, tennis, ski, basketball, checkered_flag, snowboarder, "woman-running": woman_running, "man-running": man_running, runner, running, "woman-surfing": woman_surfing, "man-surfing": man_surfing, surfer, sports_medal, trophy, horse_racing, football, rugby_football, "woman-swimming": woman_swimming, "man-swimming": man_swimming, swimmer, "woman-lifting-weights": woman_lifting_weights, "man-lifting-weights": man_lifting_weights, weight_lifter, "woman-golfing": woman_golfing, "man-golfing": man_golfing, golfer, racing_motorcycle, racing_car, cricket_bat_and_ball, volleyball, field_hockey_stick_and_ball, ice_hockey_stick_and_puck, table_tennis_paddle_and_ball, snow_capped_mountain, camping, beach_with_umbrella, building_construction, house_buildings, cityscape, derelict_house_building, classical_building, desert, desert_island, national_park, stadium, house, house_with_garden, office, post_office, european_post_office, hospital, bank, atm, hotel, love_hotel, convenience_store, school, department_store, factory, izakaya_lantern, lantern, japanese_castle, european_castle, "rainbow-flag": rainbow_flag, transgender_flag, waving_white_flag, pirate_flag, "flag-england": flag_england, "flag-scotland": flag_scotland, "flag-wales": flag_wales, waving_black_flag, rosette, label, badminton_racquet_and_shuttlecock, bow_and_arrow, amphora, "skin-tone-2": skin_tone_2, "skin-tone-3": skin_tone_3, "skin-tone-4": skin_tone_4, "skin-tone-5": skin_tone_5, "skin-tone-6": skin_tone_6, rat, mouse2, ox, water_buffalo, cow2, tiger2, leopard, rabbit2, black_cat, cat2, dragon, crocodile, whale2, snail, snake, racehorse, ram, goat, sheep, monkey, rooster, chicken, service_dog, dog2, pig2, boar, elephant, octopus, shell, bug, ant, bee, honeybee, ladybug, lady_beetle, fish, tropical_fish, blowfish, turtle, hatching_chick, baby_chick, hatched_chick, bird, penguin, koala, poodle, dromedary_camel, camel, dolphin, flipper, mouse, cow, tiger, rabbit, cat, dragon_face, whale, horse, monkey_face, dog, pig, frog, hamster, wolf, polar_bear, bear, panda_face, pig_nose, feet, paw_prints, chipmunk, eyes, "eye-in-speech-bubble": eye_in_speech_bubble, eye, ear, nose, lips, tongue, point_up_2, point_down, point_left, point_right, facepunch, punch, wave, ok_hand, "+1": _1, thumbsup, "-1": _12, thumbsdown, clap, open_hands, crown, womans_hat, eyeglasses, necktie, shirt, tshirt, jeans, dress, kimono, bikini, womans_clothes, purse, handbag, pouch, mans_shoe, shoe, athletic_shoe, high_heel, sandal, boot, footprints, bust_in_silhouette, busts_in_silhouette, boy, girl, "male-farmer": male_farmer, "male-cook": male_cook, man_feeding_baby, "male-student": male_student, "male-singer": male_singer, "male-artist": male_artist, "male-teacher": male_teacher, "male-factory-worker": male_factory_worker, "man-boy-boy": man_boy_boy, "man-boy": man_boy, "man-girl-boy": man_girl_boy, "man-girl-girl": man_girl_girl, "man-girl": man_girl, "man-man-boy": man_man_boy, "man-man-boy-boy": man_man_boy_boy, "man-man-girl": man_man_girl, "man-man-girl-boy": man_man_girl_boy, "man-man-girl-girl": man_man_girl_girl, "man-woman-boy": man_woman_boy, family, "man-woman-boy-boy": man_woman_boy_boy, "man-woman-girl": man_woman_girl, "man-woman-girl-boy": man_woman_girl_boy, "man-woman-girl-girl": man_woman_girl_girl, "male-technologist": male_technologist, "male-office-worker": male_office_worker, "male-mechanic": male_mechanic, "male-scientist": male_scientist, "male-astronaut": male_astronaut, "male-firefighter": male_firefighter, man_with_probing_cane, red_haired_man, curly_haired_man, bald_man, white_haired_man, man_in_motorized_wheelchair, man_in_manual_wheelchair, "male-doctor": male_doctor, "male-judge": male_judge, "male-pilot": male_pilot, "man-heart-man": man_heart_man, "man-kiss-man": man_kiss_man, man, "female-farmer": female_farmer, "female-cook": female_cook, woman_feeding_baby, "female-student": female_student, "female-singer": female_singer, "female-artist": female_artist, "female-teacher": female_teacher, "female-factory-worker": female_factory_worker, "woman-boy-boy": woman_boy_boy, "woman-boy": woman_boy, "woman-girl-boy": woman_girl_boy, "woman-girl-girl": woman_girl_girl, "woman-girl": woman_girl, "woman-woman-boy": woman_woman_boy, "woman-woman-boy-boy": woman_woman_boy_boy, "woman-woman-girl": woman_woman_girl, "woman-woman-girl-boy": woman_woman_girl_boy, "woman-woman-girl-girl": woman_woman_girl_girl, "female-technologist": female_technologist, "female-office-worker": female_office_worker, "female-mechanic": female_mechanic, "female-scientist": female_scientist, "female-astronaut": female_astronaut, "female-firefighter": female_firefighter, woman_with_probing_cane, red_haired_woman, curly_haired_woman, bald_woman, white_haired_woman, woman_in_motorized_wheelchair, woman_in_manual_wheelchair, "female-doctor": female_doctor, "female-judge": female_judge, "female-pilot": female_pilot, "woman-heart-man": woman_heart_man, "woman-heart-woman": woman_heart_woman, "woman-kiss-man": woman_kiss_man, "woman-kiss-woman": woman_kiss_woman, woman, man_and_woman_holding_hands, woman_and_man_holding_hands, couple, two_men_holding_hands, men_holding_hands, two_women_holding_hands, women_holding_hands, "female-police-officer": female_police_officer, "male-police-officer": male_police_officer, cop, "women-with-bunny-ears-partying": women_with_bunny_ears_partying, "woman-with-bunny-ears-partying": woman_with_bunny_ears_partying, dancers, "men-with-bunny-ears-partying": men_with_bunny_ears_partying, "man-with-bunny-ears-partying": man_with_bunny_ears_partying, woman_with_veil, man_with_veil, bride_with_veil, "blond-haired-woman": blond_haired_woman, "blond-haired-man": blond_haired_man, person_with_blond_hair, man_with_gua_pi_mao, "woman-wearing-turban": woman_wearing_turban, "man-wearing-turban": man_wearing_turban, man_with_turban, older_man, older_woman, baby, "female-construction-worker": female_construction_worker, "male-construction-worker": male_construction_worker, construction_worker, princess, japanese_ogre, japanese_goblin, ghost, angel, alien, space_invader, imp, skull, "woman-tipping-hand": woman_tipping_hand, information_desk_person, "man-tipping-hand": man_tipping_hand, "female-guard": female_guard, "male-guard": male_guard, guardsman, dancer, lipstick, nail_care, "woman-getting-massage": woman_getting_massage, massage, "man-getting-massage": man_getting_massage, "woman-getting-haircut": woman_getting_haircut, haircut, "man-getting-haircut": man_getting_haircut, barber, syringe, pill, kiss, love_letter, ring, gem, couplekiss, bouquet, couple_with_heart, wedding, heartbeat, broken_heart, two_hearts, sparkling_heart, heartpulse, cupid, blue_heart, green_heart, yellow_heart, purple_heart, gift_heart, revolving_hearts, heart_decoration, diamond_shape_with_a_dot_inside, bulb, anger, bomb, zzz, boom, collision, sweat_drops, droplet, dash, hankey, poop, shit, muscle, dizzy, speech_balloon, thought_balloon, white_flower, moneybag, currency_exchange, heavy_dollar_sign, credit_card, yen, dollar, euro, pound, money_with_wings, chart, seat, computer, briefcase, minidisc, floppy_disk, cd, dvd, file_folder, open_file_folder, page_with_curl, page_facing_up, date, calendar, card_index, chart_with_upwards_trend, chart_with_downwards_trend, bar_chart, clipboard, pushpin, round_pushpin, paperclip, straight_ruler, triangular_ruler, bookmark_tabs, ledger, notebook, notebook_with_decorative_cover, closed_book, book, open_book, green_book, blue_book, orange_book, books, name_badge, scroll, memo, pencil, telephone_receiver, pager, fax, satellite_antenna, loudspeaker, mega, outbox_tray, inbox_tray, package: package2, "e-mail": e_mail, incoming_envelope, envelope_with_arrow, mailbox_closed, mailbox, mailbox_with_mail, mailbox_with_no_mail, postbox, postal_horn, newspaper, iphone, calling, vibration_mode, mobile_phone_off, no_mobile_phones, signal_strength, camera, camera_with_flash, video_camera, tv, radio, vhs, film_projector, prayer_beads, twisted_rightwards_arrows, repeat, repeat_one, arrows_clockwise, arrows_counterclockwise, low_brightness, high_brightness, mute, speaker, sound, loud_sound, battery, electric_plug, mag, mag_right, lock_with_ink_pen, closed_lock_with_key, key, lock, unlock, bell, no_bell, bookmark, link, radio_button, back, end, on, soon, top, underage, keycap_ten, capital_abcd, abcd, symbols, abc, fire, flashlight, wrench, hammer, nut_and_bolt, hocho, knife, gun, microscope, telescope, crystal_ball, six_pointed_star, beginner, trident, black_square_button, white_square_button, red_circle, large_blue_circle, large_orange_diamond, large_blue_diamond, small_orange_diamond, small_blue_diamond, small_red_triangle, small_red_triangle_down, arrow_up_small, arrow_down_small, om_symbol, dove_of_peace, kaaba, mosque, synagogue, menorah_with_nine_branches, clock1, clock2, clock3, clock4, clock5, clock6, clock7, clock8, clock9, clock10, clock11, clock12, clock130, clock230, clock330, clock430, clock530, clock630, clock730, clock830, clock930, clock1030, clock1130, clock1230, candle, mantelpiece_clock, hole, man_in_business_suit_levitating, "female-detective": female_detective, "male-detective": male_detective, sleuth_or_spy, dark_sunglasses, spider, spider_web, joystick, man_dancing, linked_paperclips, lower_left_ballpoint_pen, lower_left_fountain_pen, lower_left_paintbrush, lower_left_crayon, raised_hand_with_fingers_splayed, middle_finger, reversed_hand_with_middle_finger_extended, "spock-hand": spock_hand, black_heart, desktop_computer, printer, three_button_mouse, trackball, frame_with_picture, card_index_dividers, card_file_box, file_cabinet, wastebasket, spiral_note_pad, spiral_calendar_pad, compression, old_key, rolled_up_newspaper, dagger_knife, speaking_head_in_silhouette, left_speech_bubble, right_anger_bubble, ballot_box_with_ballot, world_map, mount_fuji, tokyo_tower, statue_of_liberty, japan, moyai, grinning, grin, joy, smiley, smile, sweat_smile, laughing, satisfied, innocent, smiling_imp, wink, blush, yum, relieved, heart_eyes, sunglasses, smirk, neutral_face, expressionless, unamused, sweat, pensive, confused, confounded, kissing, kissing_heart, kissing_smiling_eyes, kissing_closed_eyes, stuck_out_tongue, stuck_out_tongue_winking_eye, stuck_out_tongue_closed_eyes, disappointed, worried, angry, rage, cry, persevere, triumph, disappointed_relieved, frowning, anguished, fearful, weary, sleepy, tired_face, grimacing, sob, face_exhaling, open_mouth, hushed, cold_sweat, scream, astonished, flushed, sleeping, face_with_spiral_eyes, dizzy_face, face_in_clouds, no_mouth, mask, smile_cat, joy_cat, smiley_cat, heart_eyes_cat, smirk_cat, kissing_cat, pouting_cat, crying_cat_face, scream_cat, slightly_frowning_face, slightly_smiling_face, upside_down_face, face_with_rolling_eyes, "woman-gesturing-no": woman_gesturing_no, no_good, "man-gesturing-no": man_gesturing_no, "woman-gesturing-ok": woman_gesturing_ok, ok_woman, "man-gesturing-ok": man_gesturing_ok, "woman-bowing": woman_bowing, "man-bowing": man_bowing, bow, see_no_evil, hear_no_evil, speak_no_evil, "woman-raising-hand": woman_raising_hand, raising_hand, "man-raising-hand": man_raising_hand, raised_hands, "woman-frowning": woman_frowning, person_frowning, "man-frowning": man_frowning, "woman-pouting": woman_pouting, person_with_pouting_face, "man-pouting": man_pouting, pray, rocket, helicopter, steam_locomotive, railway_car, bullettrain_side, bullettrain_front, train2, metro, light_rail, station, tram, train, bus, oncoming_bus, trolleybus, busstop, minibus, ambulance, fire_engine, police_car, oncoming_police_car, taxi, oncoming_taxi, car, red_car, oncoming_automobile, blue_car, truck, articulated_lorry, tractor, monorail, mountain_railway, suspension_railway, mountain_cableway, aerial_tramway, ship, "woman-rowing-boat": woman_rowing_boat, "man-rowing-boat": man_rowing_boat, rowboat, speedboat, traffic_light, vertical_traffic_light, construction, rotating_light, triangular_flag_on_post, door, no_entry_sign, smoking, no_smoking, put_litter_in_its_place, do_not_litter, potable_water, "non-potable_water": non_potable_water, bike, no_bicycles, "woman-biking": woman_biking, "man-biking": man_biking, bicyclist, "woman-mountain-biking": woman_mountain_biking, "man-mountain-biking": man_mountain_biking, mountain_bicyclist, "woman-walking": woman_walking, "man-walking": man_walking, walking, no_pedestrians, children_crossing, mens, womens, restroom, baby_symbol, toilet, wc, shower, bath, bathtub, passport_control, customs, baggage_claim, left_luggage, couch_and_lamp, sleeping_accommodation, shopping_bags, bellhop_bell, bed, place_of_worship, octagonal_sign, shopping_trolley, hindu_temple, hut, elevator, hammer_and_wrench, shield, oil_drum, motorway, railway_track, motor_boat, small_airplane, airplane_departure, airplane_arriving, satellite, passenger_ship, scooter, motor_scooter, canoe, sled, flying_saucer, skateboard, auto_rickshaw, pickup_truck, roller_skate, large_orange_circle, large_yellow_circle, large_green_circle, large_purple_circle, large_brown_circle, large_red_square, large_blue_square, large_orange_square, large_yellow_square, large_green_square, large_purple_square, large_brown_square, pinched_fingers, white_heart, brown_heart, pinching_hand, zipper_mouth_face, money_mouth_face, face_with_thermometer, nerd_face, thinking_face, face_with_head_bandage, robot_face, hugging_face, the_horns, sign_of_the_horns, call_me_hand, raised_back_of_hand, "left-facing_fist": left_facing_fist, "right-facing_fist": right_facing_fist, handshake, crossed_fingers, hand_with_index_and_middle_fingers_crossed, i_love_you_hand_sign, face_with_cowboy_hat, clown_face, nauseated_face, rolling_on_the_floor_laughing, drooling_face, lying_face, "woman-facepalming": woman_facepalming, "man-facepalming": man_facepalming, face_palm, sneezing_face, face_with_raised_eyebrow, face_with_one_eyebrow_raised, "star-struck": star_struck, grinning_face_with_star_eyes, zany_face, grinning_face_with_one_large_and_one_small_eye, shushing_face, face_with_finger_covering_closed_lips, face_with_symbols_on_mouth, serious_face_with_symbols_covering_mouth, face_with_hand_over_mouth, smiling_face_with_smiling_eyes_and_hand_covering_mouth, face_vomiting, face_with_open_mouth_vomiting, exploding_head, shocked_face_with_exploding_head, pregnant_woman, "breast-feeding": breast_feeding, palms_up_together, selfie, prince, woman_in_tuxedo, man_in_tuxedo, person_in_tuxedo, mrs_claus, mother_christmas, "woman-shrugging": woman_shrugging, "man-shrugging": man_shrugging, shrug, "woman-cartwheeling": woman_cartwheeling, "man-cartwheeling": man_cartwheeling, person_doing_cartwheel, "woman-juggling": woman_juggling, "man-juggling": man_juggling, juggling, fencer, "woman-wrestling": woman_wrestling, "man-wrestling": man_wrestling, wrestlers, "woman-playing-water-polo": woman_playing_water_polo, "man-playing-water-polo": man_playing_water_polo, water_polo, "woman-playing-handball": woman_playing_handball, "man-playing-handball": man_playing_handball, handball, diving_mask, wilted_flower, drum_with_drumsticks, clinking_glasses, tumbler_glass, spoon, goal_net, first_place_medal, second_place_medal, third_place_medal, boxing_glove, martial_arts_uniform, curling_stone, lacrosse, softball, flying_disc, croissant, avocado, cucumber, bacon, potato, carrot, baguette_bread, green_salad, shallow_pan_of_food, stuffed_flatbread, egg, glass_of_milk, peanuts, kiwifruit, pancakes, dumpling, fortune_cookie, takeout_box, chopsticks, bowl_with_spoon, cup_with_straw, coconut, broccoli, pie, pretzel, cut_of_meat, sandwich, canned_food, leafy_green, mango, moon_cake, bagel, smiling_face_with_3_hearts, yawning_face, smiling_face_with_tear, partying_face, woozy_face, hot_face, cold_face, ninja, disguised_face, pleading_face, sari, lab_coat, goggles, hiking_boot, womans_flat_shoe, crab, lion_face, scorpion, turkey, unicorn_face, eagle, duck, bat, shark, owl, fox_face, butterfly, deer, gorilla, lizard, rhinoceros, shrimp, squid, giraffe_face, zebra_face, hedgehog, sauropod, "t-rex": t_rex, cricket, kangaroo, llama, peacock, hippopotamus, parrot, raccoon, lobster, mosquito, microbe, badger, swan, mammoth, dodo, sloth, otter, orangutan, skunk, flamingo, oyster, beaver, bison, seal, guide_dog, probing_cane, bone, leg, foot, tooth, female_superhero, male_superhero, superhero, female_supervillain, male_supervillain, supervillain, safety_vest, ear_with_hearing_aid, motorized_wheelchair, manual_wheelchair, mechanical_arm, mechanical_leg, cheese_wedge, cupcake, salt, beverage_box, garlic, onion, falafel, waffle, butter, mate_drink, ice_cube, bubble_tea, woman_standing, man_standing, standing_person, woman_kneeling, man_kneeling, kneeling_person, deaf_woman, deaf_man, deaf_person, face_with_monocle, farmer, cook, person_feeding_baby, mx_claus, student, singer, artist, teacher, factory_worker, technologist, office_worker, mechanic, scientist, astronaut, firefighter, people_holding_hands, person_with_probing_cane, red_haired_person, curly_haired_person, bald_person, white_haired_person, person_in_motorized_wheelchair, person_in_manual_wheelchair, health_worker, judge, pilot, adult, child, older_adult, woman_with_beard, man_with_beard, bearded_person, person_with_headscarf, woman_in_steamy_room, man_in_steamy_room, person_in_steamy_room, woman_climbing, person_climbing, man_climbing, woman_in_lotus_position, person_in_lotus_position, man_in_lotus_position, female_mage, mage, male_mage, female_fairy, fairy, male_fairy, female_vampire, vampire, male_vampire, mermaid, merman, merperson, female_elf, male_elf, elf, female_genie, male_genie, genie, female_zombie, male_zombie, zombie, brain, orange_heart, billed_cap, scarf, gloves, coat, socks, red_envelope, firecracker, jigsaw, test_tube, petri_dish, dna, compass, abacus, fire_extinguisher, toolbox, bricks, magnet, luggage, lotion_bottle, thread, yarn, safety_pin, teddy_bear, broom, basket, roll_of_paper, soap, sponge, receipt, nazar_amulet, ballet_shoes, "one-piece_swimsuit": one_piece_swimsuit, briefs, shorts, thong_sandal, drop_of_blood, adhesive_bandage, stethoscope, "yo-yo": yo_yo, kite, parachute, boomerang, magic_wand, pinata, nesting_dolls, ringed_planet, chair, razor, axe, diya_lamp, banjo, military_helmet, accordion, long_drum, coin, carpentry_saw, screwdriver, ladder, hook, mirror, window: window2, plunger, sewing_needle, knot, bucket, mouse_trap, toothbrush, headstone, placard, rock, fly, worm, beetle, cockroach, potted_plant, wood, feather, anatomical_heart, lungs, people_hugging, blueberries, bell_pepper, olive, flatbread, tamale, fondue, teapot, bangbang, interrobang, tm, information_source, left_right_arrow, arrow_up_down, arrow_upper_left, arrow_upper_right, arrow_lower_right, arrow_lower_left, leftwards_arrow_with_hook, arrow_right_hook, watch, hourglass, keyboard, eject, fast_forward, rewind, arrow_double_up, arrow_double_down, black_right_pointing_double_triangle_with_vertical_bar, black_left_pointing_double_triangle_with_vertical_bar, black_right_pointing_triangle_with_double_vertical_bar, alarm_clock, stopwatch, timer_clock, hourglass_flowing_sand, double_vertical_bar, black_square_for_stop, black_circle_for_record, m, black_small_square, white_small_square, arrow_forward, arrow_backward, white_medium_square, black_medium_square, white_medium_small_square, black_medium_small_square, sunny, cloud, umbrella, snowman, comet, phone, telephone, ballot_box_with_check, shamrock, point_up, skull_and_crossbones, radioactive_sign, biohazard_sign, orthodox_cross, star_and_crescent, peace_symbol, yin_yang, wheel_of_dharma, white_frowning_face, relaxed, female_sign, male_sign, gemini, cancer, leo, virgo, libra, scorpius, chess_pawn, spades, clubs, hearts, diamonds, hotsprings, recycle, infinity, wheelchair, hammer_and_pick, crossed_swords, medical_symbol, staff_of_aesculapius, scales, alembic, gear, atom_symbol, fleur_de_lis, warning, zap, transgender_symbol, white_circle, black_circle, coffin, funeral_urn, soccer, baseball, snowman_without_snow, partly_sunny, thunder_cloud_and_rain, ophiuchus, pick, helmet_with_white_cross, chains, no_entry, shinto_shrine, church, mountain, umbrella_on_ground, fountain, golf, ferry, boat, sailboat, skier, ice_skate, "woman-bouncing-ball": woman_bouncing_ball, "man-bouncing-ball": man_bouncing_ball, person_with_ball, tent, fuelpump, scissors, airplane, email, envelope, fist, hand, raised_hand, v, writing_hand, pencil2, black_nib, heavy_check_mark, heavy_multiplication_x, latin_cross, star_of_david, eight_spoked_asterisk, eight_pointed_black_star, snowflake, sparkle, x, negative_squared_cross_mark, heavy_heart_exclamation_mark_ornament, heart_on_fire, mending_heart, heart, arrow_right, curly_loop, loop, arrow_heading_up, arrow_heading_down, arrow_left, arrow_up, arrow_down, black_large_square, white_large_square, star, o, wavy_dash, part_alternation_mark, congratulations, secret };

// src/modals/IconModal.ts
var EMOJI_REGEX = (0, import_emoji_regex.default)();
var IconModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(plugin, file) {
    super(plugin.app);
    this.plugin = plugin;
    this.metaManager = plugin.metaManager;
    this.containerEl.addClass("banner-icon-modal");
    this.targetFile = file;
    this.emojis = Object.entries(emoji_default).map(([code, emoji]) => ({ code, emoji }));
    this.limit = 50;
    this.setPlaceholder("Pick an emoji to use as an icon");
  }
  getItems() {
    return this.inputEl.value.length ? this.emojis : [];
  }
  getItemText(item) {
    return item.code;
  }
  getSuggestions(query) {
    const emojiText = query.match(EMOJI_REGEX)?.join("");
    return emojiText ? [{
      item: { code: "Paste inputted emoji(s)", emoji: emojiText },
      match: { score: 1, matches: [] }
    }] : super.getSuggestions(query);
  }
  renderSuggestion(match, el) {
    super.renderSuggestion(match, el);
    const { useTwemoji } = this.plugin.settings;
    const { emoji } = match.item;
    const html2 = useTwemoji ? twemoji_esm_default.parse(emoji) : `<span class="regular-emoji">${emoji} </span>`;
    el.insertAdjacentHTML("afterbegin", html2);
  }
  async onChooseItem(item) {
    await this.metaManager.upsertBannerData(this.targetFile, { icon: item.emoji });
  }
};

// node_modules/common-tags/es/TemplateTag/TemplateTag.js
var _createClass = function() {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps)
      defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var _templateObject = _taggedTemplateLiteral(["", ""], ["", ""]);
function _taggedTemplateLiteral(strings, raw) {
  return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } }));
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var TemplateTag = function() {
  function TemplateTag2() {
    var _this = this;
    for (var _len = arguments.length, transformers = Array(_len), _key = 0; _key < _len; _key++) {
      transformers[_key] = arguments[_key];
    }
    _classCallCheck(this, TemplateTag2);
    this.tag = function(strings) {
      for (var _len2 = arguments.length, expressions = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        expressions[_key2 - 1] = arguments[_key2];
      }
      if (typeof strings === "function") {
        return _this.interimTag.bind(_this, strings);
      }
      if (typeof strings === "string") {
        return _this.transformEndResult(strings);
      }
      strings = strings.map(_this.transformString.bind(_this));
      return _this.transformEndResult(strings.reduce(_this.processSubstitutions.bind(_this, expressions)));
    };
    if (transformers.length > 0 && Array.isArray(transformers[0])) {
      transformers = transformers[0];
    }
    this.transformers = transformers.map(function(transformer) {
      return typeof transformer === "function" ? transformer() : transformer;
    });
    return this.tag;
  }
  _createClass(TemplateTag2, [{
    key: "interimTag",
    value: function interimTag(previousTag, template) {
      for (var _len3 = arguments.length, substitutions = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        substitutions[_key3 - 2] = arguments[_key3];
      }
      return this.tag(_templateObject, previousTag.apply(void 0, [template].concat(substitutions)));
    }
  }, {
    key: "processSubstitutions",
    value: function processSubstitutions(substitutions, resultSoFar, remainingPart) {
      var substitution = this.transformSubstitution(substitutions.shift(), resultSoFar);
      return "".concat(resultSoFar, substitution, remainingPart);
    }
  }, {
    key: "transformString",
    value: function transformString(str) {
      var cb = function cb2(res, transform) {
        return transform.onString ? transform.onString(res) : res;
      };
      return this.transformers.reduce(cb, str);
    }
  }, {
    key: "transformSubstitution",
    value: function transformSubstitution(substitution, resultSoFar) {
      var cb = function cb2(res, transform) {
        return transform.onSubstitution ? transform.onSubstitution(res, resultSoFar) : res;
      };
      return this.transformers.reduce(cb, substitution);
    }
  }, {
    key: "transformEndResult",
    value: function transformEndResult(endResult) {
      var cb = function cb2(res, transform) {
        return transform.onEndResult ? transform.onEndResult(res) : res;
      };
      return this.transformers.reduce(cb, endResult);
    }
  }]);
  return TemplateTag2;
}();
var TemplateTag_default = TemplateTag;

// node_modules/common-tags/es/trimResultTransformer/trimResultTransformer.js
var trimResultTransformer = function trimResultTransformer2() {
  var side = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
  return {
    onEndResult: function onEndResult(endResult) {
      if (side === "") {
        return endResult.trim();
      }
      side = side.toLowerCase();
      if (side === "start" || side === "left") {
        return endResult.replace(/^\s*/, "");
      }
      if (side === "end" || side === "right") {
        return endResult.replace(/\s*$/, "");
      }
      throw new Error("Side not supported: " + side);
    }
  };
};
var trimResultTransformer_default = trimResultTransformer;

// node_modules/common-tags/es/stripIndentTransformer/stripIndentTransformer.js
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
var stripIndentTransformer = function stripIndentTransformer2() {
  var type = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "initial";
  return {
    onEndResult: function onEndResult(endResult) {
      if (type === "initial") {
        var match = endResult.match(/^[^\S\n]*(?=\S)/gm);
        var indent = match && Math.min.apply(Math, _toConsumableArray(match.map(function(el) {
          return el.length;
        })));
        if (indent) {
          var regexp = new RegExp("^.{" + indent + "}", "gm");
          return endResult.replace(regexp, "");
        }
        return endResult;
      }
      if (type === "all") {
        return endResult.replace(/^[^\S\n]+/gm, "");
      }
      throw new Error("Unknown type: " + type);
    }
  };
};
var stripIndentTransformer_default = stripIndentTransformer;

// node_modules/common-tags/es/replaceResultTransformer/replaceResultTransformer.js
var replaceResultTransformer = function replaceResultTransformer2(replaceWhat, replaceWith) {
  return {
    onEndResult: function onEndResult(endResult) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error("replaceResultTransformer requires at least 2 arguments.");
      }
      return endResult.replace(replaceWhat, replaceWith);
    }
  };
};
var replaceResultTransformer_default = replaceResultTransformer;

// node_modules/common-tags/es/replaceSubstitutionTransformer/replaceSubstitutionTransformer.js
var replaceSubstitutionTransformer = function replaceSubstitutionTransformer2(replaceWhat, replaceWith) {
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (replaceWhat == null || replaceWith == null) {
        throw new Error("replaceSubstitutionTransformer requires at least 2 arguments.");
      }
      if (substitution == null) {
        return substitution;
      } else {
        return substitution.toString().replace(replaceWhat, replaceWith);
      }
    }
  };
};
var replaceSubstitutionTransformer_default = replaceSubstitutionTransformer;

// node_modules/common-tags/es/inlineArrayTransformer/inlineArrayTransformer.js
var defaults = {
  separator: "",
  conjunction: "",
  serial: false
};
var inlineArrayTransformer = function inlineArrayTransformer2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaults;
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (Array.isArray(substitution)) {
        var arrayLength = substitution.length;
        var separator = opts.separator;
        var conjunction = opts.conjunction;
        var serial = opts.serial;
        var indent = resultSoFar.match(/(\n?[^\S\n]+)$/);
        if (indent) {
          substitution = substitution.join(separator + indent[1]);
        } else {
          substitution = substitution.join(separator + " ");
        }
        if (conjunction && arrayLength > 1) {
          var separatorIndex = substitution.lastIndexOf(separator);
          substitution = substitution.slice(0, separatorIndex) + (serial ? separator : "") + " " + conjunction + substitution.slice(separatorIndex + 1);
        }
      }
      return substitution;
    }
  };
};
var inlineArrayTransformer_default = inlineArrayTransformer;

// node_modules/common-tags/es/splitStringTransformer/splitStringTransformer.js
var splitStringTransformer = function splitStringTransformer2(splitBy) {
  return {
    onSubstitution: function onSubstitution(substitution, resultSoFar) {
      if (splitBy != null && typeof splitBy === "string") {
        if (typeof substitution === "string" && substitution.includes(splitBy)) {
          substitution = substitution.split(splitBy);
        }
      } else {
        throw new Error("You need to specify a string character to split by.");
      }
      return substitution;
    }
  };
};
var splitStringTransformer_default = splitStringTransformer;

// node_modules/common-tags/es/removeNonPrintingValuesTransformer/removeNonPrintingValuesTransformer.js
var isValidValue = function isValidValue2(x2) {
  return x2 != null && !Number.isNaN(x2) && typeof x2 !== "boolean";
};
var removeNonPrintingValuesTransformer = function removeNonPrintingValuesTransformer2() {
  return {
    onSubstitution: function onSubstitution(substitution) {
      if (Array.isArray(substitution)) {
        return substitution.filter(isValidValue);
      }
      if (isValidValue(substitution)) {
        return substitution;
      }
      return "";
    }
  };
};
var removeNonPrintingValuesTransformer_default = removeNonPrintingValuesTransformer;

// node_modules/common-tags/es/commaLists/commaLists.js
var commaLists = new TemplateTag_default(inlineArrayTransformer_default({ separator: "," }), stripIndentTransformer_default, trimResultTransformer_default);

// node_modules/common-tags/es/commaListsAnd/commaListsAnd.js
var commaListsAnd = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "and" }), stripIndentTransformer_default, trimResultTransformer_default);

// node_modules/common-tags/es/commaListsOr/commaListsOr.js
var commaListsOr = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "or" }), stripIndentTransformer_default, trimResultTransformer_default);

// node_modules/common-tags/es/html/html.js
var html = new TemplateTag_default(splitStringTransformer_default("\n"), removeNonPrintingValuesTransformer_default, inlineArrayTransformer_default, stripIndentTransformer_default, trimResultTransformer_default);
var html_default = html;

// node_modules/common-tags/es/safeHtml/safeHtml.js
var safeHtml = new TemplateTag_default(splitStringTransformer_default("\n"), inlineArrayTransformer_default, stripIndentTransformer_default, trimResultTransformer_default, replaceSubstitutionTransformer_default(/&/g, "&amp;"), replaceSubstitutionTransformer_default(/</g, "&lt;"), replaceSubstitutionTransformer_default(/>/g, "&gt;"), replaceSubstitutionTransformer_default(/"/g, "&quot;"), replaceSubstitutionTransformer_default(/'/g, "&#x27;"), replaceSubstitutionTransformer_default(/`/g, "&#x60;"));

// node_modules/common-tags/es/oneLine/oneLine.js
var oneLine = new TemplateTag_default(replaceResultTransformer_default(/(?:\n(?:\s*))+/g, " "), trimResultTransformer_default);

// node_modules/common-tags/es/oneLineTrim/oneLineTrim.js
var oneLineTrim = new TemplateTag_default(replaceResultTransformer_default(/(?:\n\s*)/g, ""), trimResultTransformer_default);

// node_modules/common-tags/es/oneLineCommaLists/oneLineCommaLists.js
var oneLineCommaLists = new TemplateTag_default(inlineArrayTransformer_default({ separator: "," }), replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);

// node_modules/common-tags/es/oneLineCommaListsOr/oneLineCommaListsOr.js
var oneLineCommaListsOr = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "or" }), replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);

// node_modules/common-tags/es/oneLineCommaListsAnd/oneLineCommaListsAnd.js
var oneLineCommaListsAnd = new TemplateTag_default(inlineArrayTransformer_default({ separator: ",", conjunction: "and" }), replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);

// node_modules/common-tags/es/inlineLists/inlineLists.js
var inlineLists = new TemplateTag_default(inlineArrayTransformer_default, stripIndentTransformer_default, trimResultTransformer_default);

// node_modules/common-tags/es/oneLineInlineLists/oneLineInlineLists.js
var oneLineInlineLists = new TemplateTag_default(inlineArrayTransformer_default, replaceResultTransformer_default(/(?:\s+)/g, " "), trimResultTransformer_default);

// node_modules/common-tags/es/stripIndent/stripIndent.js
var stripIndent = new TemplateTag_default(stripIndentTransformer_default, trimResultTransformer_default);

// node_modules/common-tags/es/stripIndents/stripIndents.js
var stripIndents = new TemplateTag_default(stripIndentTransformer_default("all"), trimResultTransformer_default);
var stripIndents_default = stripIndents;

// src/modals/LocalImageModal.ts
var import_obsidian3 = __toModule(require("obsidian"));

// src/Settings.ts
var import_obsidian2 = __toModule(require("obsidian"));
var INITIAL_SETTINGS = {
  height: null,
  style: "solid",
  showInInternalEmbed: true,
  internalEmbedHeight: null,
  showInPreviewEmbed: true,
  previewEmbedHeight: null,
  frontmatterField: null,
  bannerDragModifier: "none",
  iconHorizontalAlignment: "left",
  iconHorizontalTransform: null,
  iconVerticalAlignment: "center",
  iconVerticalTransform: null,
  useTwemoji: true,
  showPreviewInLocalModal: true,
  localSuggestionsLimit: null,
  bannersFolder: null,
  allowMobileDrag: false,
  titlePlacement: "next-to-icon"
};
var DEFAULT_VALUES = {
  height: 250,
  internalEmbedHeight: 200,
  previewEmbedHeight: 120,
  frontmatterField: "banner",
  iconHorizontalTransform: "0px",
  iconVerticalTransform: "0px",
  localSuggestionsLimit: 10,
  bannersFolder: "/"
};
var STYLE_OPTIONS = {
  solid: "Solid",
  gradient: "Gradient"
};
var BANNER_DRAG_MOD_OPTIONS = {
  none: "None",
  shift: "\u21E7 Shift",
  ctrl: "\u2303 Ctrl",
  alt: "\u2387 Alt",
  meta: "\u2318 Meta"
};
var ICON_HORIZONTAL_OPTIONS = {
  left: "Left",
  center: "Center",
  right: "Right",
  custom: "Custom"
};
var ICON_VERTICAL_OPTIONS = {
  above: "Above",
  center: "Center",
  below: "Below",
  custom: "Custom"
};
var TITLE_PLACEMENT_OPTIONS = {
  "below-icon": "Below icon",
  "next-to-icon": "Next to icon on the right"
};
var SettingsTab = class extends import_obsidian2.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
    this.containerEl.addClass("banner-settings");
  }
  async saveSettings(changed, options = {}) {
    this.plugin.settings = { ...this.plugin.settings, ...changed };
    await this.plugin.saveData(this.plugin.settings);
    this.plugin.loadStyles();
    const { refreshViews, reloadSettings } = options;
    if (reloadSettings) {
      this.display();
    }
    if (refreshViews) {
      this.plugin.refreshViews();
    }
  }
  display() {
    const { containerEl } = this;
    const {
      height,
      style,
      showInInternalEmbed,
      internalEmbedHeight,
      showInPreviewEmbed,
      previewEmbedHeight,
      frontmatterField,
      bannerDragModifier,
      iconHorizontalAlignment,
      iconHorizontalTransform,
      iconVerticalAlignment,
      iconVerticalTransform,
      useTwemoji,
      showPreviewInLocalModal,
      localSuggestionsLimit,
      bannersFolder,
      allowMobileDrag,
      titlePlacement
    } = this.plugin.settings;
    containerEl.empty();
    this.createHeader("Banners", "A nice, lil' thing to add some flair to your notes");
    new import_obsidian2.Setting(containerEl).setName("Banner height").setDesc("Set how big the banner should be in pixels").addText((text) => {
      text.inputEl.type = "number";
      text.setValue(`${height}`);
      text.setPlaceholder(`${DEFAULT_VALUES.height}`);
      text.onChange(async (val) => this.saveSettings({ height: val ? parseInt(val) : null }));
    });
    new import_obsidian2.Setting(containerEl).setName("Banner style").setDesc("Set a style for all of your banners").addDropdown((dropdown) => dropdown.addOptions(STYLE_OPTIONS).setValue(style).onChange(async (val) => this.saveSettings({ style: val }, { refreshViews: true })));
    new import_obsidian2.Setting(containerEl).setName("Show banner in internal embed").setDesc(createFragment((frag) => {
      frag.appendText("Choose whether to display the banner in the internal embed. This is the embed that appears when you write ");
      frag.createEl("code", { text: "![[file]]" });
      frag.appendText(" in a file");
    })).addToggle((toggle) => toggle.setValue(showInInternalEmbed).onChange(async (val) => this.saveSettings({ showInInternalEmbed: val }, { reloadSettings: true, refreshViews: true })));
    if (this.plugin.settings.showInInternalEmbed) {
      new import_obsidian2.Setting(containerEl).setName("Internal embed banner height").setDesc("Set the banner size inside the internal embed").addText((text) => {
        text.inputEl.type = "number";
        text.setValue(`${internalEmbedHeight}`);
        text.setPlaceholder(`${DEFAULT_VALUES.internalEmbedHeight}`);
        text.onChange(async (val) => this.saveSettings({ internalEmbedHeight: val ? parseInt(val) : null }));
      });
    }
    new import_obsidian2.Setting(containerEl).setName("Show banner in preview embed").setDesc(createFragment((frag) => {
      frag.appendText("Choose whether to display the banner in the page preview embed. This is the embed that appears from the ");
      frag.createEl("span", { text: "Page Preview ", attr: { style: "color: --var(text-normal)" } });
      frag.appendText("core plugin");
    })).addToggle((toggle) => toggle.setValue(showInPreviewEmbed).onChange(async (val) => this.saveSettings({ showInPreviewEmbed: val }, { reloadSettings: true })));
    if (this.plugin.settings.showInPreviewEmbed) {
      new import_obsidian2.Setting(containerEl).setName("Preview embed banner height").setDesc("Set the banner size inside the page preview embed").addText((text) => {
        text.inputEl.type = "number";
        text.setValue(`${previewEmbedHeight}`);
        text.setPlaceholder(`${DEFAULT_VALUES.previewEmbedHeight}`);
        text.onChange(async (val) => this.saveSettings({ previewEmbedHeight: val ? parseInt(val) : null }));
      });
    }
    new import_obsidian2.Setting(containerEl).setName("Frontmatter field name").setDesc(createFragment((frag) => {
      frag.appendText("Set a customizable frontmatter field to use for banner data.");
      frag.createEl("br");
      frag.appendText("For example, the default value ");
      frag.createEl("code", { text: DEFAULT_VALUES.frontmatterField });
      frag.appendText(" will use the fields ");
      frag.createEl("code", { text: DEFAULT_VALUES.frontmatterField });
      frag.appendText(", ");
      frag.createEl("code", { text: `${DEFAULT_VALUES.frontmatterField}_x` });
      frag.appendText(", ");
      frag.createEl("code", { text: `${DEFAULT_VALUES.frontmatterField}_y` });
      frag.appendText(", and so on...");
    })).addText((text) => text.setValue(frontmatterField).setPlaceholder(DEFAULT_VALUES.frontmatterField).onChange(async (val) => this.saveSettings({ frontmatterField: val || null }, { refreshViews: true })));
    new import_obsidian2.Setting(containerEl).setName("Banner drag modifier key").setDesc(createFragment((frag) => {
      frag.appendText("Set a modifier key that must be used to drag a banner.");
      frag.createEl("br");
      frag.appendText("For example, setting it to ");
      frag.createEl("b", { text: "\u21E7 Shift" });
      frag.appendText(" means that you must hold down Shift as you drag the banner to move it. This can help to avoid accidental banner shifts.");
    })).addDropdown((dropdown) => dropdown.addOptions(BANNER_DRAG_MOD_OPTIONS).setValue(bannerDragModifier).onChange(async (val) => {
      await this.saveSettings({ bannerDragModifier: val }, { refreshViews: true });
      this.plugin.toggleBannerCursor(val === "none");
    }));
    this.createHeader("Banner Header", "Give people a lil' notion of what your note is about");
    const settingHIA = new import_obsidian2.Setting(containerEl).setName("Horizontal alignment").setDesc(createFragment((frag) => {
      frag.appendText("Align the icon horizontally.");
      frag.createEl("br");
      ;
      frag.appendText("If set to ");
      frag.createEl("b", { text: "Custom" });
      frag.appendText(", you can set an offset, relative to the left side of the note. This can be any valid ");
      frag.createEl("a", { text: "CSS length value", href: "https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Values_and_units#lengths" });
      frag.appendText(", such as ");
      frag.createEl("code", { text: "10px" });
      frag.appendText(", ");
      frag.createEl("code", { text: "-30%" });
      frag.appendText(", ");
      frag.createEl("code", { text: "calc(1em + 10px)" });
      frag.appendText(", and so on...");
    }));
    if (iconHorizontalAlignment === "custom") {
      settingHIA.addText((text) => text.setValue(iconHorizontalTransform).setPlaceholder(DEFAULT_VALUES.iconHorizontalTransform).onChange(async (val) => this.saveSettings({ iconHorizontalTransform: val || null }, { refreshViews: true })));
    }
    settingHIA.addDropdown((dd) => dd.addOptions(ICON_HORIZONTAL_OPTIONS).setValue(iconHorizontalAlignment).onChange(async (val) => this.saveSettings({ iconHorizontalAlignment: val }, { reloadSettings: true, refreshViews: true })));
    const settingVIA = new import_obsidian2.Setting(containerEl).setName("Vertical alignment").setDesc(createFragment((frag) => {
      frag.appendText("Align the icon vertically, relative to a banner (if any).");
      frag.createEl("br");
      ;
      frag.appendText("If set to ");
      frag.createEl("b", { text: "Custom" });
      frag.appendText(", you can set an offset, relative to the center of a banner's lower edge. This follows the same format as the setting above.");
    }));
    if (iconVerticalAlignment === "custom") {
      settingVIA.addText((text) => text.setValue(iconVerticalTransform).setPlaceholder(DEFAULT_VALUES.iconVerticalTransform).onChange(async (val) => this.saveSettings({ iconVerticalTransform: val || null }, { refreshViews: true })));
    }
    settingVIA.addDropdown((dd) => dd.addOptions(ICON_VERTICAL_OPTIONS).setValue(iconVerticalAlignment).onChange(async (val) => this.saveSettings({ iconVerticalAlignment: val }, { reloadSettings: true, refreshViews: true })));
    new import_obsidian2.Setting(containerEl).setName("Use Twemoji").setDesc(createFragment((frag) => {
      frag.appendText("Twitter's emoji have better support here. ");
      frag.createEl("b", { text: "NOTE: " });
      frag.appendText("This is only applied in the Icon modal and the banner icon in the preview view");
    })).addToggle((toggle) => toggle.setValue(useTwemoji).onChange(async (val) => this.saveSettings({ useTwemoji: val }, { refreshViews: true })));
    new import_obsidian2.Setting(containerEl).setName("Banner title placement").setDesc("Set the position of the banner title").addDropdown((dropdown) => dropdown.addOptions(TITLE_PLACEMENT_OPTIONS).setValue(titlePlacement).onChange(async (val) => {
      if (val === "below-icon") {
        const bannerHeader = document.querySelector(".obsidian-banner-header");
        if (bannerHeader) {
          bannerHeader.classList.add("title-placement-below-icon");
          bannerHeader.classList.remove("title-placement-next-to-icon");
        }
      } else if (val === "next-to-icon") {
        const bannerHeader = document.querySelector(".obsidian-banner-header");
        if (bannerHeader) {
          bannerHeader.classList.add("title-placement-next-to-icon");
          bannerHeader.classList.remove("title-placement-below-icon");
        }
      }
      this.saveSettings({ titlePlacement: val }, { reloadSettings: true, refreshViews: true });
    }));
    this.createHeader("Local Image Modal", 'For the modal that shows when you run the "Add/Change banner with local image" command');
    new import_obsidian2.Setting(containerEl).setName("Show preview images").setDesc("Enabling this will display a preview of the images suggested").addToggle((toggle) => toggle.setValue(showPreviewInLocalModal).onChange(async (val) => this.saveSettings({ showPreviewInLocalModal: val })));
    new import_obsidian2.Setting(containerEl).setName("Suggestions limit").setDesc(createFragment((frag) => {
      frag.appendText("Show up to this many suggestions when searching through local images.");
      frag.createEl("br");
      frag.createEl("b", { text: "NOTE: " });
      frag.appendText("Using a high number while ");
      frag.createEl("span", { text: "Show preview images ", attr: { style: "color: var(--text-normal)" } });
      frag.appendText("is on can lead to some slowdowns");
    })).addText((text) => {
      text.inputEl.type = "number";
      text.setValue(`${localSuggestionsLimit}`);
      text.setPlaceholder(`${DEFAULT_VALUES.localSuggestionsLimit}`);
      text.onChange(async (val) => this.saveSettings({ localSuggestionsLimit: val ? parseInt(val) : null }));
    });
    new import_obsidian2.Setting(containerEl).setName("Banners folder").setDesc(createFragment((frag) => {
      frag.appendText("Select a folder to exclusively search for banner files in.");
      frag.createEl("br");
      frag.appendText("If empty, it will search the entire vault for image files");
    })).addText((text) => text.setValue(bannersFolder).setPlaceholder(DEFAULT_VALUES.bannersFolder).onChange(async (val) => this.saveSettings({ bannersFolder: val || null })));
    this.createHeader("Experimental Things", "Not as well-tested and probably finicky");
    new import_obsidian2.Setting(containerEl).setName("Allow mobile drag").setDesc(createFragment((frag) => {
      frag.appendText("Allow dragging the banner on mobile devices.");
      frag.createEl("br");
      frag.createEl("b", { text: "NOTE: " });
      frag.appendText("App reload might be necessary");
    })).addToggle((toggle) => toggle.setValue(allowMobileDrag).onChange(async (val) => this.saveSettings({ allowMobileDrag: val }, { refreshViews: true })));
  }
  createHeader(text, desc = null) {
    const header = this.containerEl.createDiv({ cls: "setting-item setting-item-heading banner-setting-header" });
    header.createEl("p", { text, cls: "banner-setting-header-title" });
    if (desc) {
      header.createEl("p", { text: desc, cls: "banner-setting-header-description" });
    }
  }
};

// src/modals/LocalImageModal.ts
var IMAGE_FORMATS = ["apng", "avif", "gif", "jpg", "jpeg", "jpe", "jif", "jfif", "png", "webp"];
var LocalImageModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(plugin, file) {
    super(plugin.app);
    this.plugin = plugin;
    this.vault = plugin.app.vault;
    this.metadataCache = plugin.app.metadataCache;
    this.metaManager = plugin.metaManager;
    this.containerEl.addClass("banner-local-image-modal");
    this.targetFile = file;
    this.limit = this.plugin.getSettingValue("localSuggestionsLimit");
    this.setPlaceholder("Pick an image to use as a banner");
  }
  getItems() {
    const path = this.plugin.getSettingValue("bannersFolder");
    if (path === DEFAULT_VALUES.bannersFolder) {
      return this.vault.getFiles().filter((f) => IMAGE_FORMATS.includes(f.extension));
    }
    const folder = this.vault.getAbstractFileByPath(path);
    if (!folder || !(folder instanceof import_obsidian3.TFolder)) {
      new import_obsidian3.Notice(createFragment((frag) => {
        frag.appendText("ERROR! Make sure that you set the ");
        frag.createEl("b", { text: "Banners folder" });
        frag.appendText(" to a valid folder in the settings.");
      }), 7e3);
      this.close();
      return [];
    }
    return this.getImagesInFolder(folder);
  }
  getItemText(item) {
    return item.path;
  }
  renderSuggestion(match, el) {
    super.renderSuggestion(match, el);
    const { showPreviewInLocalModal } = this.plugin.settings;
    if (showPreviewInLocalModal) {
      const content = el.innerHTML;
      el.addClass("banner-suggestion-item");
      el.innerHTML = html_default`
        <p class="suggestion-text">${content}</p>
        <div class="suggestion-image-wrapper">
          <img src="${this.vault.getResourcePath(match.item)}" />
        </div>
      `;
    }
  }
  async onChooseItem(image) {
    const link2 = this.metadataCache.fileToLinktext(image, this.targetFile.path);
    await this.metaManager.upsertBannerData(this.targetFile, { src: `"![[${link2}]]"` });
  }
  getImagesInFolder(folder) {
    const files = [];
    folder.children.forEach((abFile) => {
      if (abFile instanceof import_obsidian3.TFolder) {
        files.push(...this.getImagesInFolder(folder));
      }
      const file = abFile;
      if (IMAGE_FORMATS.includes(file.extension)) {
        files.push(file);
      }
    });
    return files;
  }
};

// src/modals/TitleModal.ts
var import_obsidian4 = __toModule(require("obsidian"));
var import_emoji_regex2 = __toModule(require_emoji_regex());
var EMOJI_REGEX2 = (0, import_emoji_regex2.default)();
var TitleModal = class extends import_obsidian4.FuzzySuggestModal {
  constructor(plugin, file) {
    super(plugin.app);
    this.plugin = plugin;
    this.metaManager = plugin.metaManager;
    this.containerEl.addClass("banner-title-modal");
    this.targetFile = file;
    this.limit = 50;
    this.setPlaceholder("Pick an title for the banner");
  }
  getItemText(item) {
    return item.text;
  }
  getItems() {
    return this.inputEl.value.length ? [{ text: this.inputEl.value }] : [];
  }
  async onChooseItem(item) {
    await this.metaManager.upsertBannerData(this.targetFile, { title: item.text });
  }
};

// src/MetaManager.ts
var import_obsidian5 = __toModule(require("obsidian"));
var ALL_BANNER_KEYS = ["src", "x", "y", "icon", "lock"];
var MetaManager = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.metadata = plugin.app.metadataCache;
    this.vault = plugin.app.vault;
  }
  getBannerData(frontmatter) {
    if (!frontmatter) {
      return null;
    }
    const fieldName = this.plugin.getSettingValue("frontmatterField");
    const {
      [fieldName]: src,
      [`${fieldName}_x`]: x2,
      [`${fieldName}_y`]: y,
      [`${fieldName}_icon`]: icon,
      [`${fieldName}_lock`]: lock2,
      [`${fieldName}_title`]: title
    } = frontmatter;
    return {
      src,
      x: this.parseBannerPos(x2),
      y: this.parseBannerPos(y),
      icon,
      lock: typeof lock2 === "boolean" ? lock2 : lock2 === "true",
      title
    };
  }
  getBannerDataFromFile(file) {
    if (!file) {
      return null;
    }
    const { frontmatter } = this.metadata.getFileCache(file);
    return this.getBannerData(frontmatter);
  }
  async upsertBannerData(fileOrPath, data) {
    const file = fileOrPath instanceof import_obsidian5.TFile ? fileOrPath : this.getFileByPath(fileOrPath);
    if (!file) {
      return;
    }
    const { src, x: x2, y, icon, lock: lock2, title } = data;
    const baseName = this.plugin.getSettingValue("frontmatterField");
    const trueFields = {
      ...src !== void 0 && { [baseName]: src },
      ...x2 !== void 0 && { [`${baseName}_x`]: x2 },
      ...y !== void 0 && { [`${baseName}_y`]: y },
      ...icon !== void 0 && { [`${baseName}_icon`]: icon },
      ...lock2 !== void 0 && { [`${baseName}_lock`]: lock2 },
      ...title !== void 0 && { [`${baseName}_title`]: title }
    };
    const fieldsArr = Object.keys(trueFields);
    const content = await this.vault.read(file);
    const lines = content.split("\n");
    const yamlStartLine = lines.indexOf("---");
    const hasYaml = yamlStartLine !== -1 && lines.slice(0, yamlStartLine).every((l) => !l);
    let changed = false;
    if (hasYaml) {
      let i;
      for (i = yamlStartLine + 1; i < lines.length && fieldsArr.length; i++) {
        if (lines[i].startsWith("---")) {
          break;
        }
        const [key2, val] = lines[i].split(": ");
        const targetIndex = fieldsArr.indexOf(key2);
        if (targetIndex === -1) {
          continue;
        }
        const newVal = trueFields[key2];
        if (val !== newVal) {
          lines[i] = `${key2}: ${newVal}`;
          changed = true;
        }
        fieldsArr.splice(targetIndex, 1);
      }
      if (fieldsArr.length) {
        lines.splice(i, 0, ...this.formatYamlFields(fieldsArr, trueFields));
        i += fieldsArr.length;
        changed = true;
      }
      const end2 = lines.indexOf("---", i);
      if (end2 === -1) {
        lines.splice(i, 0, "---");
        changed = true;
      }
    } else {
      lines.unshift(stripIndents_default`
        ---
        ${this.formatYamlFields(fieldsArr, trueFields).join("\n")}
        ---
      `);
      changed = true;
    }
    if (!changed) {
      return;
    }
    const newContent = lines.join("\n");
    await this.vault.modify(file, newContent);
  }
  async removeBannerData(file, targetFieldOrFields = ALL_BANNER_KEYS) {
    const targetFields = Array.isArray(targetFieldOrFields) ? targetFieldOrFields : [targetFieldOrFields];
    const srcIndex = targetFields.indexOf("src");
    if (srcIndex > -1) {
      targetFields.splice(srcIndex, 1, "");
    }
    const base = this.plugin.getSettingValue("frontmatterField");
    const trueFields = targetFields.map((suffix) => `${base}${suffix ? `_${suffix}` : ""}`);
    const { frontmatter: { position, ...fields } } = this.metadata.getFileCache(file);
    const frontmatterKeys = Object.keys(fields ?? {});
    if (!fields || !trueFields.some((f) => frontmatterKeys.includes(f))) {
      return;
    }
    const content = await this.vault.read(file);
    const lines = content.split("\n");
    const { line: start } = position.start;
    let { line: end2 } = position.end;
    if (frontmatterKeys.every((f) => trueFields.includes(f))) {
      lines.splice(start, end2 - start + 1);
    } else {
      for (let i = start + 1; i < end2 && trueFields.length; i++) {
        const [key2] = lines[i].split(": ");
        const fieldIndex = trueFields.indexOf(key2);
        if (fieldIndex === -1) {
          continue;
        }
        lines.splice(i, 1);
        trueFields.splice(fieldIndex, 1);
        i--;
        end2--;
      }
    }
    const newContent = lines.join("\n");
    await this.vault.modify(file, newContent);
  }
  getFileByPath(path) {
    const file = this.vault.getAbstractFileByPath(path);
    return file instanceof import_obsidian5.TFile ? file : null;
  }
  parseBannerPos(val) {
    if (val === void 0) {
      return void 0;
    }
    return typeof val === "number" ? val : parseFloat(val);
  }
  formatYamlFields(fields, data) {
    return fields.map((key2) => [key2, `${data[key2]}`]).sort((a2, b2) => a2[0].localeCompare(b2[0])).map(([key2, val]) => `${key2}: ${val}`);
  }
};

// src/cm5/BannerMD.ts
var import_obsidian7 = __toModule(require("obsidian"));

// src/Banner.ts
var import_obsidian6 = __toModule(require("obsidian"));
var import_clamp = __toModule(require_clamp());
var getMousePos = (e) => {
  const { clientX, clientY } = e instanceof MouseEvent ? e : e.targetTouches[0];
  return { x: clientX, y: clientY };
};
var handleDragStart = (e, dragData, isModHeld) => {
  if (!isModHeld && e instanceof MouseEvent) {
    return;
  }
  const { x: x2, y } = getMousePos(e);
  const { clientHeight, clientWidth, naturalHeight, naturalWidth } = e.target;
  dragData.x = x2;
  dragData.y = y;
  dragData.isDragging = true;
  dragData.vertical = naturalHeight / naturalWidth >= clientHeight / clientWidth;
};
var handleDragMove = (e, dragData) => {
  if (!dragData.isDragging) {
    return;
  }
  const img = e.target;
  const { x: x2, y } = getMousePos(e);
  const delta = {
    x: (dragData.x - x2) / img.clientWidth * 30,
    y: (dragData.y - y) / img.clientHeight * 30
  };
  dragData.x = x2;
  dragData.y = y;
  const [currentX, currentY] = img.style.objectPosition.split(" ").map((n) => parseFloat(n));
  if (dragData.vertical) {
    const newY = (0, import_clamp.default)(currentY + delta.y, 0, 100);
    img.style.objectPosition = `${currentX}% ${newY}%`;
  } else {
    const newX = (0, import_clamp.default)(currentX + delta.x, 0, 100);
    img.style.objectPosition = `${newX}% ${currentY}%`;
  }
};
var handleDragEnd = async (img, path, dragData, plugin) => {
  if (!dragData.isDragging) {
    return;
  }
  dragData.isDragging = false;
  const [x2, y] = img.style.objectPosition.split(" ").map((n) => Math.round(parseFloat(n) * 1e3) / 1e5);
  await plugin.metaManager.upsertBannerData(path, dragData.vertical ? { y } : { x: x2 });
};
var parseSource = (plugin, src, filepath) => {
  if (/^\!\[\[.+\]\]$/.test(src)) {
    const link2 = src.slice(3, -2);
    const file2 = plugin.metadataCache.getFirstLinkpathDest(link2, filepath);
    return file2 ? plugin.vault.getResourcePath(file2) : link2;
  }
  const path = src.startsWith("/") ? src.slice(1) : src;
  const file = plugin.vault.getAbstractFileByPath(path);
  return file instanceof import_obsidian6.TFile ? plugin.vault.getResourcePath(file) : src;
};
var buildBanner = (plugin, bannerData, filepath, wrapper, contentEl, isEmbed = false) => {
  const { src, x: x2 = 0.5, y = 0.5, lock: lock2 } = bannerData;
  const dragData = { x: null, y: null, isDragging: false, vertical: true };
  const canDrag = !isEmbed && !lock2;
  const messageBox = document.createElement("div");
  messageBox.className = "banner-message";
  messageBox.innerHTML = html_default`
    <div class="spinner">
      <div class="bounce1"></div>
      <div class="bounce2"></div>
      <div class="bounce3"></div>
    </div>
  `;
  const img = document.createElement("img");
  const clampedX = (0, import_clamp.default)(x2, 0, 1);
  const clampedY = (0, import_clamp.default)(y, 0, 1);
  img.className = "banner-image full-width";
  img.style.objectPosition = `${clampedX * 100}% ${clampedY * 100}%`;
  img.draggable = false;
  img.onload = () => wrapper.addClass("loaded");
  img.onerror = () => {
    messageBox.innerHTML = `<p>Error loading banner image! Is the <code>${plugin.getSettingValue("frontmatterField")}</code> field valid?</p>`;
    wrapper.addClass("error");
  };
  const body = document.querySelector("body");
  const listeners = [];
  if (canDrag) {
    img.classList.toggle("draggable", plugin.settings.bannerDragModifier === "none" || plugin.holdingDragModKey);
    const imgDragStart = (e) => handleDragStart(e, dragData, plugin.holdingDragModKey);
    const imgDragMove = (e) => handleDragMove(e, dragData);
    const imgDragEnd = (e) => {
      handleDragEnd(img, filepath, dragData, plugin);
    };
    listeners.push({ target: img, ev: "mousedown", func: imgDragStart }, { target: img, ev: "mousemove", func: imgDragMove }, { target: body, ev: "mouseup", func: imgDragEnd }, { target: body, ev: "mouseleave", func: imgDragEnd }, { target: img, ev: "click", func: (e) => e.stopPropagation() });
    if (plugin.settings.allowMobileDrag) {
      listeners.push({ target: img, ev: "touchstart", func: imgDragStart }, { target: img, ev: "touchmove", func: imgDragMove }, { target: body, ev: "touchend", func: imgDragEnd }, { target: img, ev: "click", func: (e) => e.stopPropagation() });
    }
  }
  listeners.forEach(({ target, ev, func }) => target.addEventListener(ev, func));
  const removeListeners = () => listeners.forEach(({ target, ev, func }) => target.removeEventListener(ev, func));
  img.src = parseSource(plugin, src, filepath);
  return [[messageBox, img], removeListeners];
};
var Banner_default = buildBanner;

// src/cm5/BannerMD.ts
var Banner = class extends import_obsidian7.MarkdownRenderChild {
  constructor(plugin, wrapper, ctx, bannerData, isEmbed) {
    super(document.createElement("div"));
    this.plugin = plugin;
    this.wrapper = wrapper;
    this.ctx = ctx;
    this.bannerData = bannerData;
    this.isEmbed = isEmbed;
    this.removeListeners = () => {
    };
  }
  onload() {
    console.log("Banner onload");
    const { style } = this.plugin.settings;
    const { containerEl: contentEl, sourcePath } = this.ctx;
    this.wrapper.addClass("obsidian-banner-wrapper");
    this.containerEl.addClass("obsidian-banner", "cm6-banner", style);
    const [elements, removeListeners] = Banner_default(this.plugin, this.bannerData, sourcePath, this.containerEl, contentEl, this.isEmbed);
    this.containerEl.append(...elements);
    this.removeListeners = removeListeners;
    this.wrapper.prepend(this.containerEl);
  }
  onunload() {
    console.log("Banner onunload");
    this.removeListeners();
  }
};

// src/cm5/HeaderMD.ts
var import_obsidian8 = __toModule(require("obsidian"));

// src/Icon.ts
var import_emoji_regex3 = __toModule(require_emoji_regex());
var EMOJI_REGEX3 = (0, import_emoji_regex3.default)();
var getIconTransform = (plugin) => {
  const { iconHorizontalAlignment, iconVerticalAlignment } = plugin.settings;
  const { iconHorizontalTransform: dH, iconVerticalTransform: dV } = DEFAULT_VALUES;
  const h = iconHorizontalAlignment === "custom" ? plugin.getSettingValue("iconHorizontalTransform") : dH;
  const v2 = iconVerticalAlignment === "custom" ? plugin.getSettingValue("iconVerticalTransform") : dV;
  return h !== dH || v2 !== dV ? `translate(${h}, ${v2})` : null;
};
var buildIcon = (plugin, icon, file) => {
  const box = document.createElement("div");
  box.addClass("icon-box");
  box.style.transform = getIconTransform(plugin);
  const text = icon.match(EMOJI_REGEX3)?.join("") ?? icon[0];
  if (plugin.settings.useTwemoji) {
    box.innerHTML = twemoji_esm_default.parse(text);
  } else {
    box.textContent = text;
  }
  box.onclick = async (e) => {
    new IconModal(plugin, file).open();
    e.stopPropagation();
  };
  return box;
};
var Icon_default = buildIcon;

// src/cm5/HeaderMD.ts
var Header = class extends import_obsidian8.MarkdownRenderChild {
  constructor(title, icon, plugin, wrapper, file) {
    super(document.createElement("div"));
    this.plugin = plugin;
    this.wrapper = wrapper;
    this.icon = icon;
    this.title = title;
    this.file = file;
  }
  onload() {
    const { iconHorizontalAlignment: ha, iconVerticalAlignment: va, titlePlacement } = this.plugin.settings;
    this.containerEl.addClass("obsidian-banner-header");
    this.containerEl.addClass("obsidian-banner-icon", "cm6-banner-icon", `h-${ha}`, `v-${va}`, `title-placement-${titlePlacement}`);
    this.wrapper.addClass("has-banner-header");
    if (this.icon) {
      const el = Icon_default(this.plugin, this.icon, this.file);
      this.containerEl.append(el);
    }
    if (this.title) {
      const titleSpan = document.createElement("span");
      titleSpan.addClass("obsidian-banner-title", "HyperMD-header-1");
      titleSpan.textContent = this.title;
      this.containerEl.append(titleSpan);
    }
    this.wrapper.prepend(this.containerEl);
  }
};

// src/cm5/index.ts
var getPostProcessor = (plugin) => (el, ctx) => {
  if (!el.querySelector("pre.frontmatter")) {
    return;
  }
  const { showInInternalEmbed, showInPreviewEmbed } = plugin.settings;
  const { containerEl, frontmatter, sourcePath } = ctx;
  const bannerData = plugin.metaManager.getBannerData(frontmatter);
  const file = plugin.metadataCache.getFirstLinkpathDest(sourcePath, "/");
  const fourLevelsDown = containerEl?.parentElement?.parentElement?.parentElement?.parentElement;
  const isInternalEmbed = fourLevelsDown?.hasClass("internal-embed") ?? false;
  const isPreviewEmbed = fourLevelsDown?.hasClass("popover") ?? false;
  if (bannerData?.icon || bannerData?.title) {
    ctx.addChild(new Header(bannerData.title, bannerData.icon ?? "", plugin, el, file));
  }
  if (bannerData?.src && (!isInternalEmbed || showInInternalEmbed) && (!isPreviewEmbed || showInPreviewEmbed)) {
    ctx.addChild(new Banner(plugin, el, ctx, bannerData, isInternalEmbed || isPreviewEmbed));
  }
};
var cm5_default = getPostProcessor;

// src/cm6/index.ts
var import_obsidian9 = __toModule(require("obsidian"));
var import_view4 = __toModule(require("@codemirror/view"));
var import_language = __toModule(require("@codemirror/language"));

// src/cm6/BannerWidget.ts
var import_view = __toModule(require("@codemirror/view"));
var BannerWidget = class extends import_view.WidgetType {
  constructor(plugin, bannerData, filepath, contentEl, settingsFacet) {
    super();
    this.plugin = plugin;
    this.bannerData = bannerData;
    this.filepath = filepath;
    this.contentEl = contentEl;
    this.settingsFacet = settingsFacet;
    this.removeListeners = () => {
    };
  }
  eq(widget) {
    const { bannerData: { src, x: x2, y, lock: lock2 }, filepath, settingsFacet } = widget;
    return this.bannerData.src === src && this.bannerData.x === x2 && this.bannerData.y === y && this.bannerData.lock === lock2 && this.filepath === filepath && this.settingsFacet === settingsFacet;
  }
  toDOM() {
    const { plugin, bannerData, filepath, contentEl } = this;
    const wrap = document.createElement("div");
    wrap.addClass("obsidian-banner", "cm6-banner", plugin.settings.style);
    const [elements, removeListeners] = Banner_default(plugin, bannerData, filepath, wrap, contentEl);
    wrap.append(...elements);
    this.removeListeners = removeListeners;
    return wrap;
  }
  destroy() {
    this.removeListeners();
  }
};

// src/cm6/SpacerWidget.ts
var import_view2 = __toModule(require("@codemirror/view"));
var SpacerWidget = class extends import_view2.WidgetType {
  toDOM() {
    const spacer = document.createElement("div");
    spacer.addClass("obsidian-banner-spacer");
    return spacer;
  }
};

// src/cm6/HeaderWidget.ts
var import_view3 = __toModule(require("@codemirror/view"));
var HeaderWidget = class extends import_view3.WidgetType {
  constructor(title, icon, plugin, file, settingsFacet) {
    super();
    this.plugin = plugin;
    this.title = title;
    this.icon = icon;
    this.file = file;
    this.settingsFacet = settingsFacet;
    this.metaManager = plugin.metaManager;
  }
  eq(widget) {
    const { title, icon, file, settingsFacet } = widget;
    return this.title === title && this.icon === icon && this.file === file && this.settingsFacet === settingsFacet;
  }
  toDOM() {
    const { iconHorizontalAlignment: ha, iconVerticalAlignment: va, titlePlacement } = this.plugin.settings;
    const wrap = document.createElement("div");
    console.log(`title-placement-${titlePlacement}`);
    wrap.addClass("obsidian-banner-header", `title-placement-${titlePlacement}`);
    wrap.addClass("obsidian-banner-icon", `h-${ha}`, `v-${va}`);
    if (this.icon) {
      const el = Icon_default(this.plugin, this.icon, this.file);
      wrap.append(el);
    }
    const titleDiv = document.createElement("div");
    titleDiv.addClass("obsidian-banner-title", "HyperMD-header-1");
    titleDiv.textContent = this.title;
    titleDiv.contentEditable = "true";
    titleDiv.addEventListener("blur", (e) => {
      const newTitle = titleDiv.textContent;
      if (newTitle !== this.title) {
        this.title = newTitle;
        this.metaManager.upsertBannerData(this.file, { title: newTitle });
      }
    });
    titleDiv.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        titleDiv.blur();
      }
    });
    titleDiv.addEventListener("click", (e) => {
      titleDiv.focus();
    });
    wrap.append(titleDiv);
    return wrap;
  }
};

// src/cm6/helpers.ts
var import_state = __toModule(require("@codemirror/state"));
var import_isEqual = __toModule(require_isEqual());
var combineSettings = (values, keys) => {
  if (!values.length) {
    return null;
  }
  return keys.reduce((acc, key2) => {
    const val = values[0][key2];
    acc[key2] = val;
    return acc;
  }, {});
};
var bannerDecorKeys = ["style", "frontmatterField", "bannerDragModifier"];
var bannerDecorFacet = import_state.Facet.define({
  combine: (settings) => combineSettings(settings, bannerDecorKeys),
  compare: (a2, b2) => (0, import_isEqual.default)(a2, b2)
});
var iconDecorKeys = ["iconHorizontalAlignment", "iconHorizontalTransform", "iconVerticalAlignment", "iconVerticalTransform", "useTwemoji"];
var iconDecorFacet = import_state.Facet.define({
  combine: (settings) => combineSettings(settings, iconDecorKeys),
  compare: (a2, b2) => (0, import_isEqual.default)(a2, b2)
});

// src/cm6/index.ts
var YAML_SEPARATOR_TOKEN = "def_hmd-frontmatter";
var YAML_DEF_NAME_TOKEN = "atom_hmd-frontmatter";
var YAML_DEF_STR_TOKEN = "hmd-frontmatter_string";
var YAML_DEF_VAL_TOKENS = ["hmd-frontmatter", "hmd-frontmatter_number", "hmd-frontmatter_keyword", YAML_DEF_STR_TOKEN];
var getViewPlugin = (plugin) => import_view4.ViewPlugin.fromClass(class BannerPV {
  constructor(view) {
    this.decor = this.decorate(view.state);
  }
  update(_update) {
    const { docChanged, view, state, startState } = _update;
    if (docChanged || state.facet(bannerDecorFacet) !== startState.facet(bannerDecorFacet) || state.facet(iconDecorFacet) !== startState.facet(iconDecorFacet)) {
      this.decor = this.decorate(view.state);
    }
  }
  decorate(state) {
    const cursor = (0, import_language.syntaxTree)(state).cursor();
    cursor.firstChild();
    if (cursor.name !== YAML_SEPARATOR_TOKEN) {
      return import_view4.Decoration.none;
    }
    const frontmatter = {};
    let key2;
    while (cursor.nextSibling() && cursor.name !== YAML_SEPARATOR_TOKEN) {
      const { from, to, name } = cursor;
      if (name === YAML_DEF_NAME_TOKEN) {
        key2 = state.sliceDoc(from, to);
      } else if (YAML_DEF_VAL_TOKENS.includes(name) && !frontmatter[key2]) {
        const isStr = name === YAML_DEF_STR_TOKEN;
        const val = state.sliceDoc(from + (isStr ? 1 : 0), to - (isStr ? 1 : 0));
        frontmatter[key2] = val;
      }
    }
    ;
    const bannerData = plugin.metaManager.getBannerData(frontmatter);
    const { src, icon, title } = bannerData;
    const { contentEl, file } = state.field(import_obsidian9.editorViewField);
    const widgets = [];
    if (src) {
      const settingsFacet = state.facet(bannerDecorFacet);
      contentEl.getElementsByClassName("inline-title")[0].classList.add("hide");
      widgets.push(import_view4.Decoration.widget({ widget: new BannerWidget(plugin, bannerData, file.path, contentEl, settingsFacet) }), import_view4.Decoration.widget({ widget: new SpacerWidget() }), import_view4.Decoration.line({ class: "has-banner" }));
    } else {
      contentEl.getElementsByClassName("inline-title")[0].classList.remove("hide");
    }
    if (title || icon) {
      const settingsFacet = state.facet(iconDecorFacet);
      widgets.push(import_view4.Decoration.widget({ widget: new HeaderWidget(title, icon ?? "", plugin, file, state.facet(iconDecorFacet)) }), import_view4.Decoration.line({ class: "has-header", attributes: { "data-icon-v": settingsFacet.iconVerticalAlignment, contenteditable: "true" } }));
    }
    return import_view4.Decoration.set(widgets.map((w) => w.range(0)), true);
  }
}, {
  decorations: (v2) => v2.decor
});
var cm6_default = getViewPlugin;

// src/main.ts
var BannersPlugin = class extends import_obsidian10.Plugin {
  constructor() {
    super(...arguments);
    this.isDragModHeld = (e) => {
      let ret;
      if (e) {
        switch (this.settings.bannerDragModifier) {
          case "alt":
            ret = e.altKey;
            break;
          case "ctrl":
            ret = e.ctrlKey;
            break;
          case "meta":
            ret = e.metaKey;
            break;
          case "shift":
            ret = e.shiftKey;
            break;
          default:
            ret = true;
        }
      } else {
        ret = this.settings.bannerDragModifier === "none";
      }
      this.holdingDragModKey = ret;
      this.toggleBannerCursor(ret);
    };
    this.toggleBannerCursor = (val) => {
      document.querySelectorAll(".banner-image").forEach((el) => el.toggleClass("draggable", val));
    };
  }
  async onload() {
    console.log("Loading Banners...");
    this.settings = Object.assign({}, INITIAL_SETTINGS, await this.loadData());
    this.workspace = this.app.workspace;
    this.vault = this.app.vault;
    this.metadataCache = this.app.metadataCache;
    this.metaManager = new MetaManager(this);
    this.holdingDragModKey = false;
    this.loadProcessor();
    this.loadExtension();
    this.loadCommands();
    this.loadStyles();
    this.loadListeners();
    this.loadPrecheck();
    this.addSettingTab(new SettingsTab(this));
    this.refreshViews();
  }
  async onunload() {
    console.log("Unloading Banners...");
    this.unloadListeners();
    this.unloadBanners();
    this.unloadStyles();
  }
  loadListeners() {
    window.addEventListener("keydown", this.isDragModHeld);
    window.addEventListener("keyup", this.isDragModHeld);
  }
  loadProcessor() {
    const processor = cm5_default(this);
    this.registerMarkdownPostProcessor(processor);
  }
  loadExtension() {
    this.extensions = [
      bannerDecorFacet.of(this.settings),
      iconDecorFacet.of(this.settings),
      cm6_default(this)
    ];
    this.registerEditorExtension(this.extensions);
  }
  loadCommands() {
    this.addCommand({
      id: "banners:addBanner",
      name: "Add/Change banner with local image",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          return !!file;
        }
        new LocalImageModal(this, file).open();
      }
    });
    this.addCommand({
      id: "banners:addIcon",
      name: "Add/Change emoji icon",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          return !!file;
        }
        new IconModal(this, file).open();
      }
    });
    this.addCommand({
      id: "banners:addTitle",
      name: "Add/Change title",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          return !!file;
        }
        new TitleModal(this, file).open();
      }
    });
    this.addCommand({
      id: "banners:pasteBanner",
      name: "Paste banner from clipboard",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          return !!file;
        }
        this.pasteBanner(file);
      }
    });
    this.addCommand({
      id: "banners:lockBanner",
      name: "Lock/Unlock banner position",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          return !!file;
        }
        this.toggleBannerLock(file);
      }
    });
    this.addCommand({
      id: "banners:removeBanner",
      name: "Remove banner",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          if (!file) {
            return false;
          }
          return !!this.metaManager.getBannerDataFromFile(file)?.src;
        }
        this.removeBanner(file);
      }
    });
    this.addCommand({
      id: "banners:removeIcon",
      name: "Remove icon",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          if (!file) {
            return false;
          }
          return !!this.metaManager.getBannerDataFromFile(file)?.icon;
        }
        this.removeIcon(file);
      }
    });
    this.addCommand({
      id: "banners:removeTitle",
      name: "Remove title",
      checkCallback: (checking) => {
        const file = this.workspace.getActiveFile();
        if (checking) {
          if (!file) {
            return false;
          }
          return !!this.metaManager.getBannerDataFromFile(file)?.title;
        }
        this.removeTitle(file);
      }
    });
  }
  loadStyles() {
    document.documentElement.style.setProperty("--banner-height", `${this.getSettingValue("height")}px`);
    document.documentElement.style.setProperty("--banner-internal-embed-height", `${this.getSettingValue("internalEmbedHeight")}px`);
    document.documentElement.style.setProperty("--banner-preview-embed-height", `${this.getSettingValue("previewEmbedHeight")}px`);
  }
  loadPrecheck() {
    const files = this.workspace.getLeavesOfType("markdown").map((leaf) => leaf.view.file);
    const uniqueFiles = [...new Set(files)];
    uniqueFiles.forEach((file) => this.lintBannerSource(file));
    this.registerEvent(this.workspace.on("file-open", (file) => {
      this.lintBannerSource(file);
    }));
  }
  unloadListeners() {
    window.removeEventListener("keydown", this.isDragModHeld);
    window.removeEventListener("keyup", this.isDragModHeld);
  }
  unloadBanners() {
    this.workspace.containerEl.querySelectorAll(".obsidian-banner-wrapper").forEach((wrapper) => {
      wrapper.querySelector(".obsidian-banner")?.remove();
      wrapper.querySelector(".obsidian-banner-icon")?.remove();
      wrapper.removeClasses(["obsidian-banner-wrapper", "has-banner-header"]);
    });
  }
  unloadStyles() {
    document.documentElement.style.removeProperty("--banner-height");
    document.documentElement.style.removeProperty("--banner-internal-embed-height");
    document.documentElement.style.removeProperty("--banner-preview-embed-height");
  }
  refreshViews() {
    this.extensions[0] = bannerDecorFacet.of(this.settings);
    this.extensions[1] = iconDecorFacet.of(this.settings);
    this.workspace.updateOptions();
    this.workspace.getLeavesOfType("markdown").forEach((leaf) => {
      if (leaf.getViewState().state.mode.includes("preview")) {
        leaf.view.previewMode.rerender(true);
      }
    });
    this.isDragModHeld();
  }
  async pasteBanner(file) {
    const clipboard2 = await navigator.clipboard.readText();
    if (!(0, import_isURL.default)(clipboard2)) {
      new import_obsidian10.Notice("Your clipboard didn't had a valid URL! Please try again (and check the console if you wanna debug).");
      console.error({ clipboard: clipboard2 });
    } else {
      await this.metaManager.upsertBannerData(file, { src: `"${clipboard2}"` });
      new import_obsidian10.Notice("Pasted a new banner!");
    }
  }
  async toggleBannerLock(file) {
    const { lock: lock2 = false } = this.metaManager.getBannerDataFromFile(file);
    if (lock2) {
      await this.metaManager.removeBannerData(file, "lock");
      new import_obsidian10.Notice(`Unlocked banner position for ${file.name}!`);
    } else {
      await this.metaManager.upsertBannerData(file, { lock: true });
      new import_obsidian10.Notice(`Locked banner position for ${file.name}!`);
    }
  }
  async removeBanner(file) {
    await this.metaManager.removeBannerData(file, ["src", "x", "y", "lock"]);
    new import_obsidian10.Notice(`Removed banner for ${file.name}!`);
  }
  async removeIcon(file) {
    await this.metaManager.removeBannerData(file, "icon");
    new import_obsidian10.Notice(`Removed banner icon for ${file.name}!`);
  }
  async removeTitle(file) {
    await this.metaManager.removeBannerData(file, "title");
    new import_obsidian10.Notice(`Removed banner title for ${file.name}!`);
  }
  async lintBannerSource(file) {
    if (!file) {
      return;
    }
    const { src } = this.metaManager.getBannerDataFromFile(file) ?? {};
    if (src && typeof src === "string") {
      await this.metaManager.upsertBannerData(file, { src: `"${src}"` });
    }
  }
  getSettingValue(key2) {
    return this.settings[key2] ?? DEFAULT_VALUES[key2];
  }
};
/*! Copyright Twitter Inc. and other contributors. Licensed under MIT */
//# sourceMappingURL=data:application/json;base64,
